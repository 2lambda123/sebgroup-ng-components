(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{IUzx:function(e,n,t){"use strict";t.r(n),n.default='import { Component, Input, forwardRef, ViewEncapsulation, ViewChildren, QueryList, ElementRef, OnInit } from "@angular/core";\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from "@angular/forms";\nimport { randomId } from "@sebgroup/frontend-tools";\n\nexport const CUSTOM_RATING_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RatingComponent),\n    multi: true,\n};\n\n/** Rating is a component to indicate user interest in content */\n@Component({\n    selector: "sebng-rating",\n    templateUrl: "./rating.component.html",\n    styleUrls: ["./rating.component.scss"],\n    providers: [CUSTOM_RATING_VALUE_ACCESSOR],\n    encapsulation: ViewEncapsulation.None,\n})\nexport class RatingComponent implements ControlValueAccessor, OnInit {\n    /** Visual width of rating icon */\n    @Input() iconWidth?: number = 25;\n    /** Visual height of rating icon */\n    @Input() iconHeight?: number = 25;\n    /** Maximum value that can be given  */\n    @Input() max?: number = 5;\n    /** Property sets whether rating is readonly */\n    @Input() readOnly?: boolean = false;\n    /** List of tooltip corresponding to each icon */\n    @Input() tooltipList?: Array<string>;\n    /** Element class name */\n    @Input() className?: string;\n    /** Property sets whether rating\'s icon is hollow */\n    @Input() useHollow?: boolean;\n    /** Property sets whether rating will show value */\n    @Input() showValue?: boolean;\n    /** Property sets whether rating will show text value */\n    @Input() showTextValue?: boolean;\n\n    randomIds: Array<string> = [];\n\n    /**\n     * Colors of icons\n     * @member 0 Grey (unselected)\n     * @member 1 Yellow (Selected)\n     */\n    @Input() colors?: Array<string> = ["#A9A9A9", "#ffc500"];\n\n    // Placeholders for the callbacks which are later provided\n    // by the Control Value Accessor\n    private _value: any = "";\n\n    activeList: Array<string> = [];\n    initialized: boolean = false;\n    displayValue?: string;\n\n    tabCounter: number = 0;\n\n    @ViewChildren("radioItemRefs") radios: QueryList<ElementRef>;\n\n    ngOnInit() {\n        if (this.max) {\n            this.randomIds = Array.apply(null, Array(this.max)).map((item: any) => {\n                return randomId("star-");\n            });\n        }\n    }\n\n    /**\n     * Provides an array for ngFor to loop through\n     * @returns {Array<number>} An array of ones just to loop through it\n     */\n    getList(): Array<number> {\n        return Array(this.max).fill(1);\n    }\n\n    setTabIndex(i: number): string {\n        return i === 0 ? "0" : Math.floor(this.value) === i + 1 ? "0" : "-1";\n    }\n\n    /**\n     * Sets the rating value and updates the active list of stars\n     */\n    setRateValue(): void {\n        if (this.value) {\n            for (let i: number = 0; i < this.max; i++) {\n                this.activeList[i] = i < this.value ? "100%" : "0%";\n            }\n            if (this.value % 1 !== 0) {\n                this.activeList[Math.ceil(this.value) - 1] = (this.value % 1) * 100 + "%";\n            }\n        }\n    }\n\n    /**\n     * Retrieves the active list of stars to be used in the HTML template\n     * @returns {Array<string>} The array of active stars\n     */\n    getActiveList(): Array<string> {\n        if (!this.initialized) {\n            if (this.value) {\n                this.setRateValue();\n                this.initialized = true;\n            }\n        }\n        this.getTextValue();\n        return this.activeList;\n    }\n\n    /** Retrieves the text value if the option is set to true */\n    getTextValue(): void {\n        if (this.value && this.showTextValue && this.tooltipList.length) {\n            this.displayValue = this.tooltipList[Math.ceil(this.value - 1)];\n        } else {\n            this.displayValue = "error!";\n        }\n    }\n\n    /**\n     * Sets the value to the clicked star\n     * @param {number} key The key number of the star being clicked\n     */\n    onClick(key: number): void {\n        if (!this.readOnly) {\n            this.value = key;\n        }\n    }\n\n    /**\n     * Gives a UI feedback by highlighting the stars being hovered over\n     * @param key The key number of the star being hovered over\n     */\n    onMouseEnter(key: number): void {\n        if (!this.readOnly) {\n            for (let i: number = 0; i < this.max; i++) {\n                this.activeList[i] = i <= key ? "100%" : "0%";\n            }\n        }\n    }\n\n    /**\n     * navigate through the ratings of arrowLeft and right clicks\n     * @param e KeyBoardEvent\n     * @param index , the index of the selectedIndex\n     */\n\n    onKeydown(e: KeyboardEvent): void {\n        e.preventDefault();\n        e.stopPropagation();\n\n        let selectedElement: ElementRef = null;\n\n        if (e.key.toLowerCase() === "arrowright" || e.key.toLowerCase() === "arrowup") {\n            if (this.tabCounter + 1 <= this.getList().length) {\n                this.onMouseEnter(this.tabCounter);\n                selectedElement = this.radios.toArray()[this.tabCounter];\n                this.tabCounter = this.tabCounter + 1;\n                this.onClick(this.tabCounter);\n            }\n        } else if (e.key.toLowerCase() === "arrowleft" || e.key.toLowerCase() === "arrowdown") {\n            if (this.tabCounter - 1 > -2) {\n                if (this.tabCounter > 0) {\n                    this.tabCounter = this.tabCounter - 1;\n                } else {\n                    this.tabCounter = 0;\n                }\n\n                selectedElement = this.radios.toArray()[this.tabCounter - 1];\n                this.onMouseEnter(this.tabCounter - 1);\n                this.onClick(this.tabCounter);\n            }\n        }\n\n        if (selectedElement) {\n            selectedElement.nativeElement.setAttribute("aria-checked", "true");\n            selectedElement.nativeElement.focus();\n        }\n    }\n\n    /**\n     * Resets the active list of stars after hover is completed\n     * @param key The key number of the star where the hover have left\n     */\n    onMouseLeave(key: number): void {\n        if (!this.readOnly) {\n            this.setRateValue();\n        }\n    }\n\n    /**\n     *\n     * On keyup, set the focus on the first rating\n     * @param e keboard event , check if the click key is enter key\n     * @param index the selected rating value\n     */\n    onKeyup(e: KeyboardEvent, index: number): void {\n        e.preventDefault();\n        e.stopPropagation();\n        if (e.key.toLowerCase() === "tab") {\n            const selectedElement: ElementRef = this.radios.toArray()[index];\n            this.tabCounter = index;\n            if (selectedElement) {\n                selectedElement.nativeElement.setAttribute("aria-checked", "false");\n                selectedElement.nativeElement.focus();\n            }\n        }\n    }\n\n    onTouchedCallback: () => void = () => {};\n    onChangeCallback: (_: any) => void = () => {};\n\n    // get and set accessor----------------------\n    @Input()\n    get value(): any {\n        return this._value;\n    }\n    set value(v: any) {\n        if (v !== this._value) {\n            this._value = v;\n            this.onChangeCallback(v);\n        }\n    }\n\n    // From ControlValueAccessor interfaces--------------\n    writeValue(value: any): void {\n        if (value !== this._value) {\n            this._value = value;\n            this.setRateValue();\n        }\n    }\n    registerOnChange(fn: any): void {\n        this.onChangeCallback = fn;\n    }\n    registerOnTouched(fn: any): void {\n        this.onTouchedCallback = fn;\n    }\n}\n'},bhGi:function(e,n,t){"use strict";t.r(n),t.d(n,"RatingPageModule",function(){return f});var i=t("Vn38"),a=t("SVse"),o=t("rk0L"),r=t("s7LF"),s=t("gTaN"),l=t("PGw9"),u=t("iInd"),h=t("8Y7J"),c=t("17Ss"),d=t("m+3N"),g=t("YF55"),m=t("Njz3"),b=[{path:"",component:function(){function e(){this.importString=t("IUzx"),this.snippet="<sebng-rating></sebng-rating>",this.value=3,this.iconWidth=30,this.iconHeight=30,this.max=5,document.title="Rating - SEB Angular Components"}return e.prototype.ngOnInit=function(){},e.\u0275fac=function(n){return new(n||e)},e.\u0275cmp=h.Hb({type:e,selectors:[["app-rating-page"]],decls:17,vars:15,consts:[[3,"importString"],["example",""],[3,"ngModel","iconWidth","iconHeight","max","readOnly","useHollow","showValue","showTextValue","ngModelChange"],["controls",""],["min","0",3,"ngModel","ngModelChange"],["label","Read-only","description","The component will only display the value and is not interactive.",3,"ngModel","ngModelChange"],["label","Use hollow","description","Show unselected stars outlined or hollow.",3,"ngModel","ngModelChange"],["label","Show value","description","Display the numeric value of the selected rating.",3,"ngModel","ngModelChange"],["code",""]],template:function(e,n){1&e&&(h.Tb(0,"app-doc-page",0),h.Rb(1,1),h.Tb(2,"sebng-rating",2),h.ac("ngModelChange",function(e){return n.value=e}),h.Sb(),h.Qb(),h.Rb(3,3),h.Tb(4,"label"),h.Hc(5,"Value"),h.Sb(),h.Tb(6,"sebng-stepper",4),h.ac("ngModelChange",function(e){return n.value=e}),h.Sb(),h.Tb(7,"label"),h.Hc(8,"Max"),h.Sb(),h.Tb(9,"small"),h.Hc(10,"The maximum amount of stars to display"),h.Sb(),h.Tb(11,"sebng-stepper",4),h.ac("ngModelChange",function(e){return n.max=e}),h.Sb(),h.Tb(12,"sebng-checkbox",5),h.ac("ngModelChange",function(e){return n.readOnly=e}),h.Sb(),h.Tb(13,"sebng-checkbox",6),h.ac("ngModelChange",function(e){return n.useHollow=e}),h.Sb(),h.Tb(14,"sebng-checkbox",7),h.ac("ngModelChange",function(e){return n.showValue=e}),h.Sb(),h.Qb(),h.Rb(15,8),h.Hc(16),h.Qb(),h.Sb()),2&e&&(h.mc("importString",n.importString),h.Ab(2),h.mc("ngModel",n.value)("iconWidth",n.iconWidth)("iconHeight",n.iconHeight)("max",n.max)("readOnly",n.readOnly)("useHollow",n.useHollow)("showValue",n.showValue)("showTextValue",n.showTextValue),h.Ab(4),h.mc("ngModel",n.value),h.Ab(5),h.mc("ngModel",n.max),h.Ab(1),h.mc("ngModel",n.readOnly),h.Ab(1),h.mc("ngModel",n.useHollow),h.Ab(1),h.mc("ngModel",n.showValue),h.Ab(2),h.Ic(n.snippet))},directives:[c.a,d.a,r.l,r.n,g.a,m.a],encapsulation:2}),e}()}],p=function(){function e(){}return e.\u0275mod=h.Lb({type:e}),e.\u0275inj=h.Kb({factory:function(n){return new(n||e)},imports:[[u.i.forChild(b)],u.i]}),e}(),f=function(){function e(){}return e.\u0275mod=h.Lb({type:e}),e.\u0275inj=h.Kb({factory:function(n){return new(n||e)},imports:[[a.c,p,r.h,o.a,i.a,s.a,l.a]]}),e}()}}]);