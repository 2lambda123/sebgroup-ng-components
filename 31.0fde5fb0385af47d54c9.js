(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{H4An:function(e,n,t){"use strict";t.r(n),t.d(n,"StepperPageModule",function(){return v});var r=t("gTaN"),a=t("SVse"),i=t("rk0L"),o=t("s7LF"),s=t("76k0"),l=t("iInd"),u=t("Ci8B"),p=t("8Y7J"),m=t("17Ss"),c=t("YF55"),d=t("B3dm"),h=[{path:"",component:function(){function e(e){this.formService=e,this.importString=t("o0LF"),this.value=50,document.title="Stepper - SEB Angular Components",this.extendedFormGroup=this.formService.dynamicFormSectionsToFormGroup([{key:"numbers",items:[{key:"step",controlType:"Number",label:"Step",description:"Value that changes on every increment/decrement.",value:10,min:1,max:500},{key:"min",controlType:"Number",label:"Min",description:"Minimum value of the range.",value:0,min:-1e3,max:0},{key:"max",controlType:"Number",label:"Max",description:"Maximum value of the range.",value:100,min:0,max:1e3}]},{key:"toggles",items:[{key:"disabled",controlType:"Checkbox",label:"Disabled",description:"View the component in disabled state.",value:!1}]}])}return Object.defineProperty(e.prototype,"snippet",{get:function(){var e=this.extendedFormGroup.value.numbers;return'<sebng-stepper\n    [step]="'+e.step+'"\n    [min]="'+e.min+'"\n    [max]="'+e.max+'"\n    [(ngModel)]="value"\n></sebng-stepper>'},enumerable:!1,configurable:!0}),e.\u0275fac=function(n){return new(n||e)(p.Nb(u.a))},e.\u0275cmp=p.Hb({type:e,selectors:[["app-stepper-page"]],features:[p.zb([u.a])],decls:7,vars:9,consts:[[3,"importString","centered"],["example",""],[3,"min","max","step","disabled","ngModel","ngModelChange"],["controls",""],[3,"extendedFormGroup"],["code",""]],template:function(e,n){1&e&&(p.Tb(0,"app-doc-page",0),p.Rb(1,1),p.Tb(2,"sebng-stepper",2),p.ac("ngModelChange",function(e){return n.value=e}),p.Sb(),p.Qb(),p.Rb(3,3),p.Ob(4,"app-dynamic-form",4),p.Qb(),p.Rb(5,5),p.Hc(6),p.Qb(),p.Sb()),2&e&&(p.mc("importString",n.importString)("centered",!0),p.Ab(2),p.mc("min",n.extendedFormGroup.value.numbers.min)("max",n.extendedFormGroup.value.numbers.max)("step",n.extendedFormGroup.value.numbers.step)("disabled",n.extendedFormGroup.value.toggles.disabled)("ngModel",n.value),p.Ab(2),p.mc("extendedFormGroup",n.extendedFormGroup),p.Ab(2),p.Ic(n.snippet))},directives:[m.a,c.a,o.l,o.n,d.a],encapsulation:2}),e}()}],b=function(){function e(){}return e.\u0275mod=p.Lb({type:e}),e.\u0275inj=p.Kb({factory:function(n){return new(n||e)},imports:[[l.i.forChild(h)],l.i]}),e}(),v=function(){function e(){}return e.\u0275mod=p.Lb({type:e}),e.\u0275inj=p.Kb({factory:function(n){return new(n||e)},imports:[[a.c,b,o.h,i.a,r.a,s.a]]}),e}()},o0LF:function(e,n,t){"use strict";t.r(n),n.default='import { Component, forwardRef, Input, ViewEncapsulation } from "@angular/core";\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from "@angular/forms";\n\nconst CUSTOM_STEPPER_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => StepperComponent),\n    multi: true,\n};\n\n/** A stepper makes it easier to input values that are in a narrow range */\n@Component({\n    selector: "sebng-stepper",\n    templateUrl: "./stepper.component.html",\n    styleUrls: ["./stepper.component.scss"],\n    providers: [CUSTOM_STEPPER_CONTROL_VALUE_ACCESSOR],\n    encapsulation: ViewEncapsulation.None,\n})\nexport class StepperComponent implements ControlValueAccessor {\n    /** Element class name */\n    @Input() className?: string;\n    /** Element ID */\n    @Input() id?: string;\n    /** Minimum value of the range */\n    @Input() min?: number = 1;\n    /** Maximum value of the range */\n    @Input() max?: number = 5;\n    /** Value that changes on every increment/decrement */\n    @Input() step?: number = 1;\n    /** Property sets whether stepper is disabled */\n    @Input() disabled?: boolean;\n\n    private _invalid = false;\n    // read-only inner value which holds the state of the current input (valid or not)\n    get invalid(): boolean {\n        return this._invalid;\n    }\n\n    // Placeholders for the callbacks which are later provided\n    // by the Control Value Accessor\n    private _value: number = 0;\n\n    private onTouchedCallback: () => void;\n    private onChangeCallback: (_: number) => void;\n\n    increment(): void {\n        if (this.value < this.max && this.value + this.step <= this.max) {\n            this.value = this.value + this.step;\n        }\n    }\n\n    decrement(): void {\n        if (this.value > this.min && this.value - this.step >= this.min) {\n            this.value = this.value - this.step;\n        }\n    }\n\n    // get and set accessor----------------------\n    @Input()\n    get value(): number {\n        return this._value;\n    }\n    set value(v: number) {\n        this._invalid = false;\n        if (v >= this.min && v <= this.max) {\n            this._value = Number(v);\n        } else {\n            this._invalid = true;\n        }\n        this.onChangeCallback && this.onChangeCallback(this._value);\n        this.onTouchedCallback && this.onTouchedCallback();\n    }\n\n    // From ControlValueAccessor interfaces--------------\n    writeValue(value: number) {\n        this.value = value;\n    }\n    registerOnChange(fn: any) {\n        this.onChangeCallback = fn;\n    }\n    registerOnTouched(fn: any) {\n        this.onTouchedCallback = fn;\n    }\n}\n'}}]);