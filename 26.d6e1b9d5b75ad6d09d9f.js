(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{YoDy:function(e,t,n){"use strict";n.r(t),n.d(t,"ModalPageModule",function(){return D});var o=n("t3qY"),s=n("PGw9"),i=n("DJJd"),l=n("SVse"),a=n("rk0L"),r=n("s7LF"),d=n("dJsq"),c=n("dx3L"),p=n("iInd"),u=n("Ci8B"),m=n("8Y7J"),b=n("17Ss"),h=n("r57b"),g=n("B3dm"),f=n("Z9UA");function v(e,t){1&e&&m.Ob(0,"img",16)}function y(e,t){1&e&&(m.Tb(0,"p"),m.Hc(1," Lorem ipsum, dolor sit amet consectetur adipisicing elit. Blanditiis vero perferendis deleniti dolores? Ratione asperiores excepturi nulla explicabo sed itaque, aspernatur velit. Vitae possimus autem doloribus. Ipsam laudantium praesentium iusto! "),m.Sb())}var T=function(){return["html.handlebars"]},k=[{path:"",component:function(){function e(e){this.formService=e,this.importString=n("a6ez"),this.snippet='<sebng-modal [toggle]="toggle" (dismiss)="toggle = false">\n    <div header>Title</div>\n\n    <div body>\n        <ng-template *ngTemplateOutlet="simpleBody"></ng-template>\n    </div>\n\n    <div footer>\n        <button type="button" class="btn btn-primary" data-dismiss="modal" (click)="toggle = false">\n            Close\n        </button>\n    </div>\n</sebng-modal>',this.modalTemplate="<sebng-modal>\n    <div header>Header</div>\n    <div body>body</div>\n    <div footer>footer</div>\n</sebng-modal>",this.toggle=!1,this.sizeList=[{value:null,label:"default"},{value:"lg",label:"lg"},{value:"sm",label:"sm"}],this.positionList=[{value:null,label:"default"},{value:"right",label:"right"},{value:"left",label:"left"}],document.title="Modal - SEB Angular Components",this.extendedFormGroup=this.formService.dynamicFormSectionsToFormGroup([{key:"controls",items:[{key:"size",controlType:"Dropdown",label:"Size:",value:this.sizeList[0],options:this.sizeList},{key:"position",controlType:"Dropdown",label:"Position:",value:this.positionList[0],options:this.positionList},{key:"centered",controlType:"Checkbox",label:"Centered",description:"Positions the modal in the middle of the page. Only works with default position.",value:!1},{key:"fullscreen",controlType:"Checkbox",label:"Fullscreen",value:!1},{key:"backdropDismiss",controlType:"Checkbox",label:"Backdrop dismiss",description:"Enables dismissing the modal when the backdrop is clicked",value:!0},{key:"escapeToDismiss",controlType:"Checkbox",label:"Escape to dismiss",description:'Dismisses the modal when the "Escape" key is pressed',value:!0},{key:"closeButton",controlType:"Checkbox",label:"Close button",description:"Shows a close button at the top right corner to be used to dismiss the modal",value:!0}]}])}return Object.defineProperty(e.prototype,"shouldRenderImage",{get:function(){var e=this.extendedFormGroup.value.controls.position.value;return"lg"===this.extendedFormGroup.value.controls.size.value&&["right","left"].some(function(t){return t===e})},enumerable:!1,configurable:!0}),e.\u0275fac=function(t){return new(t||e)(m.Nb(u.a))},e.\u0275cmp=m.Hb({type:e,selectors:[["app-modal-page"]],features:[m.zb([u.a])],decls:42,vars:19,consts:[[3,"importString","centered","showNotes"],["example",""],[1,"btn","btn-primary",3,"click"],[3,"toggle","id","size","position","centered","fullscreen","escapeToDismiss","backdropDismiss","closeButton","dismiss"],["header","",1,"custom-header"],["body","",1,"custom-body"],["src","https://via.placeholder.com/500","loading","lazy",4,"ngIf"],[4,"ngIf"],["footer","",1,"custom-footer"],["type","button","data-dismiss","modal",1,"btn","btn-primary",3,"click"],["code",""],["controls",""],[3,"extendedFormGroup"],["notes",""],[1,"note-markdown"],[3,"languages"],["src","https://via.placeholder.com/500","loading","lazy"]],template:function(e,t){1&e&&(m.Tb(0,"app-doc-page",0),m.Rb(1,1),m.Tb(2,"button",2),m.ac("click",function(){return t.toggle=!0}),m.Hc(3,"Open Modal"),m.Sb(),m.Tb(4,"sebng-modal",3),m.ac("dismiss",function(){return t.toggle=!1}),m.Tb(5,"div",4),m.Hc(6,"Title"),m.Sb(),m.Tb(7,"div",5),m.Fc(8,v,1,0,"img",6),m.Fc(9,y,2,0,"p",7),m.Sb(),m.Tb(10,"div",8),m.Tb(11,"button",9),m.ac("click",function(){return t.toggle=!1}),m.Hc(12," Close "),m.Sb(),m.Sb(),m.Sb(),m.Qb(),m.Rb(13,10),m.Hc(14),m.Qb(),m.Rb(15,11),m.Ob(16,"app-dynamic-form",12),m.Qb(),m.Rb(17,13),m.Tb(18,"div",14),m.Tb(19,"h2"),m.Hc(20,"Use Modal component"),m.Sb(),m.Tb(21,"h4"),m.Hc(22,"Modal Template"),m.Sb(),m.Tb(23,"p"),m.Hc(24,"this is how the modal template is created:"),m.Sb(),m.Tb(25,"p"),m.Hc(26," The modal component accepts 3 selectors "),m.Tb(27,"code"),m.Hc(28,"header, body and footer"),m.Sb(),m.Hc(29," you can add inside each selector any custom HTML Element. "),m.Sb(),m.Tb(30,"app-code-snippet",15),m.Hc(31),m.Sb(),m.Tb(32,"h2"),m.Hc(33,"Keyboard interaction"),m.Sb(),m.Tb(34,"p"),m.Hc(35," By default pressing the escape key will close the modal. This behavior can be turned off when setting the "),m.Tb(36,"code"),m.Hc(37,"escapeToDismiss"),m.Sb(),m.Hc(38," prop to "),m.Tb(39,"code"),m.Hc(40,"false"),m.Sb(),m.Hc(41,". "),m.Sb(),m.Sb(),m.Qb(),m.Sb()),2&e&&(m.mc("importString",t.importString)("centered",!0)("showNotes",!0),m.Ab(4),m.mc("toggle",t.toggle)("id","test")("size",t.extendedFormGroup.value.controls.size.value)("position",t.extendedFormGroup.value.controls.position.value)("centered",t.extendedFormGroup.value.controls.centered)("fullscreen",t.extendedFormGroup.value.controls.fullscreen)("escapeToDismiss",t.extendedFormGroup.value.controls.escapeToDismiss)("backdropDismiss",t.extendedFormGroup.value.controls.backdropDismiss)("closeButton",t.extendedFormGroup.value.controls.closeButton),m.Ab(4),m.mc("ngIf",t.shouldRenderImage),m.Ab(1),m.mc("ngIf",!t.shouldRenderImage),m.Ab(5),m.Ic(t.snippet),m.Ab(2),m.mc("extendedFormGroup",t.extendedFormGroup),m.Ab(14),m.mc("languages",m.pc(18,T)),m.Ab(1),m.Ic(t.modalTemplate))},directives:[b.a,h.a,l.o,g.a,f.a],encapsulation:2}),e}()}],w=function(){function e(){}return e.\u0275mod=m.Lb({type:e}),e.\u0275inj=m.Kb({factory:function(t){return new(t||e)},imports:[[p.i.forChild(k)],p.i]}),e}(),D=function(){function e(){}return e.\u0275mod=m.Lb({type:e}),e.\u0275inj=m.Kb({factory:function(t){return new(t||e)},providers:[{provide:d.a,useValue:{lineNumbers:!0}}],imports:[[l.c,w,r.h,a.a,o.a,s.a,i.a,d.c,c.a]]}),e}()},a6ez:function(e,t,n){"use strict";n.r(t),t.default='import { Component, Input, Output, EventEmitter, OnDestroy } from "@angular/core";\n\nexport type ModalPosition = "left" | "right" | null;\nexport type ModalSize = "lg" | "sm" | null;\n\ntype NgClassType = { [klass: string]: any };\n\n/** The modal component provides a solid foundation for creating dialogs or slideout modals  */\n@Component({\n    selector: "sebng-modal",\n    styleUrls: ["./modal.component.scss"],\n    templateUrl: "./modal.component.html",\n})\nexport class ModalComponent implements OnDestroy {\n    /**\n     * Keeps track of whether the toggle prop is pristine or not.\n     * It\'s only used to not render `hide` class when the component just rendered.\n     */\n    private hidden: boolean = true;\n    private _toggle: boolean = false;\n\n    /** Modal size follows bootstrap sizes: `lg` and `sm` */\n    @Input() size?: ModalSize;\n    /** Modal position. Available positions: `left`, `right` */\n    @Input() position?: ModalPosition;\n    /** Centers the modal in the middle of the screen. Default is `false` */\n    @Input() centered?: boolean = false;\n    /** Expands the modal to cover the whole screen. Default is `false` */\n    @Input() fullscreen?: boolean = false;\n    /** The ability to dismiss the modal when the backdrop is clicked. Default is true */\n    @Input() backdropDismiss?: boolean = true;\n    /** A toggle that shows a close button at the top right corner. Default is true */\n    @Input() closeButton?: boolean = true;\n    /** Fires a dismiss output when the escape key is registered. Default is true */\n    @Input() escapeToDismiss?: boolean = true;\n    /** Element class */\n    @Input() className?: string;\n    /** Element id */\n    @Input() id?: string;\n    /** Disability descriptor */\n    @Input() ariaLabel?: string;\n    /** Disability descriptor */\n    @Input() ariaLabelledby?: string;\n    /** Disability descriptor */\n    @Input() ariaDescribedby?: string;\n    /** Modal toggle */\n    @Input() get toggle(): boolean {\n        return this._toggle;\n    }\n    set toggle(toggle: boolean) {\n        if (this._toggle !== toggle) {\n            this._toggle = toggle;\n\n            if (toggle && this.escapeToDismiss) {\n                window.addEventListener("keyup", this.escapeKeyListener);\n            }\n\n            // Unsubscribe as soon as the the modal is dismissed\n            if (!toggle && this.escapeToDismiss) {\n                window.removeEventListener("keyup", this.escapeKeyListener);\n            }\n\n            // This only runs once when the toggle value is changed\n            if (toggle && this.hidden) {\n                this.hidden = false;\n            }\n\n            if (toggle) {\n                document.body.classList.add("overflow-hidden");\n            } else {\n                document.body.classList.remove("overflow-hidden");\n            }\n        }\n    }\n\n    /** Event triggered when the modal is dismissed. Can be triggered with close button or backdrop click */\n    @Output() dismiss: EventEmitter<MouseEvent> = new EventEmitter();\n\n    get modalClassName(): NgClassType {\n        return {\n            show: this.toggle,\n            hide: !this.toggle && !this.hidden,\n            "modal-centered": this.centered && !!!this.position && !this.fullscreen,\n            "modal-fullscreen": this.fullscreen && !!!this.position,\n            [`modal-aside modal-aside-${this.position}`]: !!this.position,\n            [this.className]: !!this.className,\n        };\n    }\n\n    get dialogClassName(): NgClassType {\n        return {\n            [`modal-${this.size}`]: !!this.size,\n        };\n    }\n\n    animationEnded(e: TransitionEvent): void {\n        if (!this.toggle) {\n            this.hidden = true;\n        }\n    }\n\n    /**\n     * Dismisses the modal\n     * @param e clicked element\n     */\n    backdropClick(e: MouseEvent): void {\n        e.stopPropagation();\n        if (this.backdropDismiss) {\n            this.dismiss.emit(e);\n        }\n    }\n\n    escapeKeyListener = (e: KeyboardEvent): void => {\n        if (e.key.toLowerCase() === "escape" && this.escapeToDismiss) {\n            this.dismiss.emit();\n        }\n    };\n\n    ngOnDestroy(): void {\n        window.removeEventListener("keyup", this.escapeKeyListener);\n        document.body.classList.remove("overflow-hidden");\n    }\n}\n'}}]);