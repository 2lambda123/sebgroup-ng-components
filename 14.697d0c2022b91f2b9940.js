(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{"1G5W":function(t,e,n){"use strict";n.d(e,"a",function(){return l});var i=n("mvVQ"),s=n("/E8u"),o=n("MGFw"),a=n("WtWf"),r=n("zx2A");function l(t){return function(e){return e.lift(new c(t))}}var c=function(){function t(e){Object(o.a)(this,t),this.notifier=e}return Object(a.a)(t,[{key:"call",value:function(t,e){var n=new h(t),i=Object(r.c)(this.notifier,new r.a(n));return i&&!n.seenValue?(n.add(i),e.subscribe(n)):n}}]),t}(),h=function(t){Object(i.a)(n,t);var e=Object(s.a)(n);function n(t){var i;return Object(o.a)(this,n),(i=e.call(this,t)).seenValue=!1,i}return Object(a.a)(n,[{key:"notifyNext",value:function(){this.seenValue=!0,this.complete()}},{key:"notifyComplete",value:function(){}}]),n}(r.b)},"9K+C":function(t,e,n){"use strict";n.r(e),n.d(e,"NotificationPageModule",function(){return C});var i=n("jkfz"),s=n("SVse"),o=n("rk0L"),a=n("s7LF"),r=n("DJJd"),l=n("PGw9"),c=n("iInd"),h=n("8Y7J"),u=n("17Ss"),m=n("TVjz"),p=n("A1V2"),g=n("cHDM"),b=n("Njz3");function d(t,e){if(1&t){var n=h.Ub();h.Tb(0,"sebng-dropdown",17),h.ac("ngModelChange",function(t){return h.xc(n),h.ec().position=t}),h.Sb()}if(2&t){var i=h.ec();h.mc("ngModel",i.position)("list",i.positionList)}}function f(t,e){if(1&t){var n=h.Ub();h.Tb(0,"sebng-dropdown",18),h.ac("ngModelChange",function(t){return h.xc(n),h.ec().positionBar=t}),h.Sb()}if(2&t){var i=h.ec();h.mc("ngModel",i.positionBar)("list",i.positionBarList)}}var v=[{path:"",component:function(){function t(){var t=this;this.themeList=[{label:"purple",value:"purple"},{label:"primary",value:"primary"},{label:"danger",value:"danger"},{label:"success",value:"success"},{label:"warning",value:"warning"},{label:"inverted",value:"inverted"}],this.positionList=[{label:"bottom-left",value:"bottom-left"},{label:"bottom-right",value:"bottom-right"},{label:"top-left",value:"top-left"},{label:"top-right",value:"top-right"}],this.positionBarList=[{label:"top",value:"top"},{label:"bottom",value:"bottom"}],this.styleList=[{label:"slide-in",value:"slide-in"},{label:"bar",value:"bar"}],this.actions=[{text:"Remind me later",action:function(){return t.toggle=!1}},{text:"Dismiss",action:function(){return t.toggle=!1}}],this.importString=n("P6Zy"),this.snippet='<sebng-notification\n    [toggle]="toggle"\n    title="Notification Title"\n    message="message"\n    (onDismiss)="toggle = false"\n></sebng-notification>',this.style=this.styleList[0],this.theme=this.themeList[0],this.position=this.positionList[0],this.positionBar=this.positionBarList[0],this.dismissable=!1,this.persist=!1,this.showActions=!1,this.showTitle=!0,this.showProgressbar=!1,this.dismissTimeout=5e3,document.title="Notification - SEB Angular Components"}return Object.defineProperty(t.prototype,"timeout",{get:function(){return Number(this.dismissTimeout)||5e3},enumerable:!1,configurable:!0}),t.\u0275fac=function(e){return new(e||t)},t.\u0275cmp=h.Hb({type:t,selectors:[["app-notification-page"]],decls:22,vars:27,consts:[[3,"importString","centered"],["example",""],[1,"btn","btn-primary",3,"click"],[3,"toggle","title","message","theme","position","dismissable","persist","progress","dismissTimeout","actions","dismiss"],["controls",""],[1,"form-group"],["label","Style",3,"ngModel","list","ngModelChange"],["label","Theme",3,"ngModel","list","ngModelChange"],["label","Position (slide-in style only)",3,"ngModel","list","ngModelChange",4,"ngIf"],["label","Position (bar style only)",3,"ngModel","list","ngModelChange",4,"ngIf"],["label","Dismiss timeout",3,"ngModel","ngModelChange"],["label","Progress bar",3,"ngModel","ngModelChange"],["label","Show/hide title",3,"ngModel","ngModelChange"],["label","Dismissable","description","Shows a close button for the user to dismiss it",3,"ngModel","ngModelChange"],["label","Persist","description","Persists the notification until its dismissed manually",3,"ngModel","ngModelChange"],["label","Actions","description","You can add up to 2 actions inside the notification",3,"ngModel","ngModelChange"],["code",""],["label","Position (slide-in style only)",3,"ngModel","list","ngModelChange"],["label","Position (bar style only)",3,"ngModel","list","ngModelChange"]],template:function(t,e){1&t&&(h.Tb(0,"app-doc-page",0),h.Rb(1,1),h.Tb(2,"button",2),h.ac("click",function(){return e.toggle=!0}),h.Hc(3,"Toggle notification"),h.Sb(),h.Tb(4,"sebng-notification",3),h.ac("dismiss",function(){return e.toggle=!1}),h.Sb(),h.Qb(),h.Rb(5,4),h.Tb(6,"div",5),h.Tb(7,"sebng-dropdown",6),h.ac("ngModelChange",function(t){return e.style=t}),h.Sb(),h.Sb(),h.Tb(8,"div",5),h.Tb(9,"sebng-dropdown",7),h.ac("ngModelChange",function(t){return e.theme=t}),h.Sb(),h.Sb(),h.Tb(10,"div",5),h.Fc(11,d,1,2,"sebng-dropdown",8),h.Fc(12,f,1,2,"sebng-dropdown",9),h.Sb(),h.Tb(13,"div",5),h.Tb(14,"sebng-textbox",10),h.ac("ngModelChange",function(t){return e.dismissTimeout=t}),h.Sb(),h.Tb(15,"sebng-checkbox",11),h.ac("ngModelChange",function(t){return e.showProgressbar=t}),h.Sb(),h.Tb(16,"sebng-checkbox",12),h.ac("ngModelChange",function(t){return e.showTitle=t}),h.Sb(),h.Tb(17,"sebng-checkbox",13),h.ac("ngModelChange",function(t){return e.dismissable=t}),h.Sb(),h.Tb(18,"sebng-checkbox",14),h.ac("ngModelChange",function(t){return e.persist=t}),h.Sb(),h.Tb(19,"sebng-checkbox",15),h.ac("ngModelChange",function(t){return e.showActions=t}),h.Sb(),h.Sb(),h.Qb(),h.Rb(20,16),h.Hc(21),h.Qb(),h.Sb()),2&t&&(h.mc("importString",e.importString)("centered",!0),h.Ab(4),h.Dc(e.style.value),h.mc("toggle",e.toggle)("title",e.showTitle?"Notification title":void 0)("message","Notification message")("theme",e.theme.value)("position","bar"===e.style.value?e.positionBar.value:e.position.value)("dismissable",e.dismissable)("persist",e.persist)("progress",e.showProgressbar)("dismissTimeout",e.timeout)("actions",e.showActions?e.actions:void 0),h.Ab(3),h.mc("ngModel",e.style)("list",e.styleList),h.Ab(2),h.mc("ngModel",e.theme)("list",e.themeList),h.Ab(2),h.mc("ngIf","slide-in"===e.style.value),h.Ab(1),h.mc("ngIf","bar"===e.style.value),h.Ab(2),h.mc("ngModel",e.dismissTimeout),h.Ab(1),h.mc("ngModel",e.showProgressbar),h.Ab(1),h.mc("ngModel",e.showTitle),h.Ab(1),h.mc("ngModel",e.dismissable),h.Ab(1),h.mc("ngModel",e.persist),h.Ab(1),h.mc("ngModel",e.showActions),h.Ab(2),h.Ic(e.snippet))},directives:[u.a,m.a,p.a,a.l,a.n,s.o,g.a,b.a],encapsulation:2}),t}()}],y=function(){function t(){}return t.\u0275mod=h.Lb({type:t}),t.\u0275inj=h.Kb({factory:function(e){return new(e||t)},imports:[[c.i.forChild(v)],c.i]}),t}(),C=function(){function t(){}return t.\u0275mod=h.Lb({type:t}),t.\u0275inj=h.Kb({factory:function(e){return new(e||t)},imports:[[s.c,y,a.h,o.a,i.a,r.a,l.a]]}),t}()},D0XW:function(t,e,n){"use strict";n.d(e,"a",function(){return s});var i=n("3N8a"),s=new(n("IjjT").a)(i.a)},P6Zy:function(t,e,n){"use strict";n.r(e),e.default='import { OnChanges, Component, ViewEncapsulation, Input, Output, EventEmitter, OnInit, SimpleChanges, OnDestroy } from "@angular/core";\nimport { Observable, PartialObserver, Subject, timer } from "rxjs";\nimport { takeUntil } from "rxjs/operators";\n\nexport type NotificationStyle = "slide-in" | "bar";\nexport type NotificationPosition = "bottom-left" | "bottom-right" | "top-left" | "top-right" | "top" | "bottom";\nexport type NotificationTheme = "purple" | "primary" | "danger" | "success" | "warning" | "inverted";\n\nexport interface NotificationAction {\n    text: string;\n    action: () => void;\n}\n\n/** An alert which pops up on the page to inform the user of an event which occured and optionally provide actions to perform. */\n@Component({\n    selector: "sebng-notification",\n    templateUrl: "./notification.component.html",\n    styleUrls: ["./notification.component.scss"],\n    encapsulation: ViewEncapsulation.None,\n})\nexport class NotificationComponent implements OnChanges, OnInit, OnDestroy {\n    /** Element class name */\n    @Input() className?: string;\n    /** Property sets whether the notification is dismissable */\n    @Input() dismissable?: boolean = true;\n    /** Interval for the notification to be dismissed, default 5s  */\n    @Input() dismissTimeout?: number = 5000;\n    /** Persist notification until dismissed (default: false) */\n    @Input() persist?: boolean = false;\n    /** Notification position, "bottom-left" | "bottom-right" | "top-left" | "top-right" | "top" | "bottom" */\n    @Input() position?: NotificationPosition;\n    /** Notification style, "slide-in" | "bar" */\n    @Input() style?: NotificationStyle;\n    /** Notification theme, "purple" | "primary" | "danger" | "success" | "warning" | "inverted" */\n    @Input() theme?: NotificationTheme;\n    /** Notification title */\n    @Input() title?: string;\n    /** Notification content */\n    @Input() message?: string;\n    /** Property sets whether the notification is toggled */\n    @Input() toggle: boolean;\n    /** Display action buttons - max: 2 actions */\n    @Input() actions?: Array<NotificationAction>;\n    /** Display progress bar based on time */\n    @Input() progress?: boolean;\n    /** Callback when notification is clicked */\n    @Output() notificationClick?: EventEmitter<MouseEvent> = new EventEmitter();\n    /** Callback when notification is dismissed */\n    @Output() dismiss?: EventEmitter<void> = new EventEmitter();\n\n    progressValue: number = 0;\n    public notificationClassNames: string;\n    private timerRef: { current: any } = { current: null };\n\n    isRunning: boolean = true;\n    isPaused: boolean = false;\n    isComplete: boolean = false;\n\n    timer$: Observable<number>;\n    timerObserver: PartialObserver<number>;\n\n    pauseTimer$ = new Subject();\n    stopTimer$ = new Subject();\n\n    // helper functions\n\n    /**\n     * Get the style class based on the theme passed through the props\n     * @param {string} style The style passed through the props\n     */\n    private getStyleClass(): void {\n        let styleClass: string = "style-";\n        if (this.style && ["slide-in", "bar"].some((s: string) => s === this.style)) {\n            styleClass += this.style;\n        } else {\n            styleClass += "slide-in";\n        }\n\n        this.notificationClassNames += " " + styleClass;\n    }\n\n    /** Get the theme class based on the theme passed though the props */\n    private getThemeClass(): void {\n        let themeClass: string = "theme-";\n        if (\n            this.theme &&\n            ["purple", "primary", "danger", "success", "warning", "inverted"].some((t: NotificationTheme) => t === this.theme)\n        ) {\n            themeClass += this.theme;\n        } else {\n            themeClass += "purple";\n        }\n        this.notificationClassNames += " " + themeClass;\n    }\n\n    /** Get the position class based on the position and style passed through the props */\n    private getPositionClass(): void {\n        let positionClass: string;\n        const position: string = this.position;\n        if (this.style && ["slide-in", "bar"].some((s: string) => s === this.style)) {\n            switch (this.style) {\n                case "slide-in":\n                    if (position && ["bottom-left", "bottom-right", "top-left", "top-right"].some((p: string) => p === position)) {\n                        positionClass = position;\n                    } else {\n                        positionClass = "bottom-left";\n                    }\n                    break;\n                case "bar":\n                    if (position && ["top", "bottom"].some((p: string) => p === position)) {\n                        positionClass = position;\n                    } else {\n                        positionClass = "top";\n                    }\n                    break;\n            }\n        } else {\n            // Should default back to `slide-in`\n            if (position && ["bottom-left", "bottom-right", "top-left", "top-right"].some((p: string) => p === position)) {\n                positionClass = position;\n            } else {\n                positionClass = "bottom-left";\n            }\n        }\n        this.notificationClassNames += " " + positionClass;\n    }\n\n    get progressValuePercentage(): number {\n        return (this.progressValue / this.dismissTimeout) * 100;\n    }\n\n    /** Start the timer to dismiss the notification */\n    startTimer(): void {\n        this.timer$ = timer(0, 100).pipe(takeUntil(this.pauseTimer$), takeUntil(this.stopTimer$));\n\n        this.timerObserver = {\n            next: (_: number) => {\n                if (this.progressValue < this.dismissTimeout) {\n                    this.progressValue += 100;\n                } else {\n                    this.stopTimer$.next();\n                    this.isRunning = false;\n                    this.isComplete = true;\n                    this.dismissNotification();\n                }\n            },\n        };\n        this.timer$.subscribe(this.timerObserver);\n    }\n\n    pauseTimer() {\n        this.pauseTimer$.next();\n        this.isPaused = true;\n        this.isRunning = false;\n    }\n\n    restartTimer(): void {\n        this.isRunning = true;\n        this.isPaused = false;\n        if (this.isComplete) {\n            this.isComplete = false;\n            this.progressValue = 0;\n        }\n\n        this.timer$.subscribe(this.timerObserver);\n    }\n\n    stopTimer(): void {\n        this.stopTimer$.next();\n        this.isRunning = false;\n        this.isPaused = false;\n        this.isComplete = false;\n    }\n\n    /** Dismiss the notification */\n    dismissNotification(): void {\n        this.clearTimer();\n        this.dismiss.emit();\n        this.stopTimer();\n        this.isRunning = false;\n    }\n\n    /** Clear the timer that dismisses the notification */\n    clearTimer(): void {\n        if (this.timerRef.current) {\n            clearTimeout(this.timerRef.current);\n            this.timerRef.current = null;\n        }\n        this.progressValue = 0;\n    }\n\n    setClassNames(): void {\n        this.notificationClassNames = "custom-notification";\n        this.getStyleClass();\n        this.getThemeClass();\n        this.getPositionClass();\n\n        this.notificationClassNames += this.className ? ` ${this.className}` : "";\n    }\n\n    // events\n    ngOnInit(): void {\n        this.setClassNames();\n        if (this.toggle && !this.persist) {\n            this.startTimer();\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.toggle) {\n            if (this.toggle && !this.persist) {\n                this.startTimer();\n            } else {\n                this.clearTimer();\n            }\n\n            this.setClassNames();\n        }\n\n        if (changes.style || changes.position || changes.className || changes.actions || changes.theme) {\n            this.setClassNames();\n        }\n\n        if (changes.persist) {\n            this.clearTimer();\n        }\n    }\n\n    /**\n     * Pause the notification timer when the mouse enters the notification\n     */\n    mouseEnter(): void {\n        this.pauseTimer();\n    }\n\n    /**\n     * Resume the notification timer when the mouse leaves the notification\n     */\n    mouseLeave(): void {\n        this.isPaused && this.restartTimer();\n    }\n\n    ngOnDestroy(): void {\n        this.clearTimer();\n    }\n}\n'},PqYM:function(t,e,n){"use strict";n.d(e,"a",function(){return l});var i=n("HDdC"),s=n("D0XW"),o=n("DH7j");function a(t){return!Object(o.a)(t)&&t-parseFloat(t)+1>=0}var r=n("z+Ro");function l(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1?arguments[1]:void 0,n=arguments.length>2?arguments[2]:void 0,o=-1;return a(e)?o=Number(e)<1?1:Number(e):Object(r.a)(e)&&(n=e),Object(r.a)(n)||(n=s.a),new i.a(function(e){var i=a(t)?t:+t-n.now();return n.schedule(c,i,{index:0,period:o,subscriber:e})})}function c(t){var e=t.index,n=t.period,i=t.subscriber;if(i.next(e),!i.closed){if(-1===n)return i.complete();t.index=e+1,this.schedule(t,n)}}}}]);