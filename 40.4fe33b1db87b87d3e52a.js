(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{"4ymN":function(e,n,t){"use strict";t.r(n),n.default='import { Component, Input, Provider, forwardRef, Pipe, PipeTransform, OnInit } from "@angular/core";\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from "@angular/forms";\nimport { DomSanitizer } from "@angular/platform-browser";\nimport { randomId } from "@sebgroup/frontend-tools/randomId";\n\nexport type InputType = "checkbox" | "radio";\nexport type IconPosition = "left" | "right";\n\ntype ToggleSelectorType = IToggleSelector | Array<IToggleSelector>;\n\nexport interface IToggleSelector {\n    value: string;\n    label?: string;\n    icon?: string;\n    iconPosition?: IconPosition;\n    customLabel?: HTMLElement;\n    description?: string;\n    disabled?: boolean;\n}\n\ninterface IDisplayToggleSelector extends IToggleSelector {\n    optionItem: IToggleSelector;\n    selected: boolean;\n}\n\nconst TOGGLE_SELECTOR_CONTROL_VALUE_ACCESSOR: Provider = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => ToggleSelectorComponent),\n    multi: true,\n};\n\n/** The Toggle selector emphasizes to the user that this is an important choice. We also think it can make choosing more attractive. */\n@Component({\n    selector: "sebng-toggle-selector",\n    templateUrl: "./toggle-selector.component.html",\n    styleUrls: ["./toggle-selector.component.scss"],\n    providers: [TOGGLE_SELECTOR_CONTROL_VALUE_ACCESSOR],\n})\nexport class ToggleSelectorComponent implements ControlValueAccessor, OnInit {\n    @Input() list: Array<IToggleSelector>;\n    @Input() name?: string = randomId("name");\n    @Input() multi?: boolean = false;\n    @Input() disabled?: boolean = false;\n    @Input() error?: boolean = false;\n    @Input() errorMessage?: string;\n\n    value: ToggleSelectorType = [];\n\n    /**\n     * Used to append a class to style the container of each input group\n     * when the element is focused or remove it when it get\'s blured\n     */\n    focusedItem: number;\n\n    /**  Array that will be used to render */\n    displayList: Array<IDisplayToggleSelector> = [];\n\n    ngOnInit(): void {\n        this.generateCheckedItems();\n    }\n\n    /** get the type attribute that needs to be rendered */\n    get inputType(): InputType {\n        return this.multi ? "checkbox" : "radio";\n    }\n\n    /**\n     * Click event on the input container\n     * @param event Click event\n     * @param idx Index of the item clicked\n     */\n    handleItemOnClick(event: Event, idx: number): void {\n        event.preventDefault();\n\n        //return false if disabled\n        if (this.list[idx].disabled) {\n            return;\n        }\n\n        const item: IToggleSelector = this.list[idx];\n\n        if (!this.multi) {\n            if (item && (this.value as IToggleSelector)?.value !== item.value) {\n                this.value = item;\n            }\n        } else {\n            if (Array.isArray(this.value) && (this.value as Array<IToggleSelector>)?.includes(item)) {\n                (this.value as Array<IToggleSelector>).splice((this.value as Array<IToggleSelector>).indexOf(item), 1);\n            } else {\n                if (this.value) {\n                    if (Array.isArray(this.value)) {\n                        (this.value as Array<IToggleSelector>).push(item);\n                    } else {\n                        this.value = [this.value as IToggleSelector, item];\n                    }\n                } else {\n                    this.value = [item];\n                }\n            }\n        }\n\n        // call callbacks\n        this.onChangeCallback && this.onChangeCallback(this.value);\n        this.onTouchedCallback && this.onTouchedCallback();\n\n        // generate checked items to display\n        this.generateCheckedItems();\n    }\n\n    /** focus input element */\n    focus(idx: number) {\n        this.focusedItem = idx;\n    }\n\n    /** blur input element */\n    blur() {\n        this.focusedItem = null;\n    }\n\n    /** defines how to track changes for items in the iterable. */\n    trackByFn = (index): number => index;\n\n    /** generate list of toggle selector with selected option */\n    generateCheckedItems(): void {\n        this.displayList =\n            this.list &&\n            this.list.map(e => {\n                if (this.multi) {\n                    let selected: boolean = !!(this.value as Array<IToggleSelector>)?.find((element: any) => element.value === e.value);\n                    return { optionItem: e, selected } as IDisplayToggleSelector;\n                } else {\n                    let selected: boolean = (this.value as IToggleSelector)?.value === e.value;\n                    return { optionItem: e, selected } as IDisplayToggleSelector;\n                }\n            });\n    }\n\n    /**\n     * Placeholders for the callbacks which are later provided\n     * by the Control Value Accessor\n     */\n    private onTouchedCallback: () => void;\n    private onChangeCallback: (_: any) => void;\n\n    writeValue(value: ToggleSelectorType): void {\n        this.value = value;\n        this.generateCheckedItems();\n    }\n    registerOnChange(fn: any): void {\n        this.onChangeCallback = fn;\n    }\n    registerOnTouched(fn: any): void {\n        this.onTouchedCallback = fn;\n    }\n}\n\n@Pipe({ name: "safeHtml" })\nexport class ToggleSelectorSafeHtmlPipe implements PipeTransform {\n    constructor(private sanitizer: DomSanitizer) {}\n    transform(value: string) {\n        return this.sanitizer.bypassSecurityTrustHtml(value);\n    }\n}\n'},M5J5:function(e,n,t){"use strict";t.r(n),t.d(n,"ToggleSelectorPageModule",function(){return p});var o=t("SVse"),i=t("s7LF"),l=t("3As6"),r=t("iInd"),s=t("8Y7J"),a=t("17Ss"),c=t("nqSA"),g=t("Njz3"),u=[{path:"",component:function(){function e(){this.importString=t("4ymN"),this.code="<sebng-toggle-loader ></sebng-toggle-loader>",this.icon='\n    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 170 170">\n        <path d="M137.5,102.1V40.4a3,3,0,0,0-3-3H8a3,3,0,0,0-3,3v61.7a3,3,0,0,0,3,3H134.5A3,3,0,0,0,137.5,102.1ZM112,91.3v7.7H30.5V91.3a3,3,0,0,0-3-3,6.1,6.1,0,0,1-6.1-6.1,3,3,0,0,0-3-3H11V63h7.5a3,3,0,0,0,3-3,6.1,6.1,0,0,1,6.1-6.1,3,3,0,0,0,3-3V43.4H112v7.5a3,3,0,0,0,3,3A6.1,6.1,0,0,1,121,60a3,3,0,0,0,3,3h7.5V79.3H124a3,3,0,0,0-3,3,6.1,6.1,0,0,1-6.1,6.1A3,3,0,0,0,112,91.3ZM131.5,57h-4.9a12.1,12.1,0,0,0-8.7-8.7V43.4h13.6ZM24.5,43.4v4.9A12.1,12.1,0,0,0,15.9,57H11V43.4ZM11,85.3h4.9A12.1,12.1,0,0,0,24.5,94v5.1H11ZM118,99.1V94a12.1,12.1,0,0,0,8.7-8.7h4.9V99.1Z"></path><path d="M151.3,115.8V54.2h-6v58.7H21.7v6H148.3A3,3,0,0,0,151.3,115.8Z"></path>\n        <path d="M159,67.9v58.7H35.5v6H162a3,3,0,0,0,3-3V67.9Z"></path>\n        <path d="M71.3,88.8A17.5,17.5,0,1,1,88.8,71.3,17.5,17.5,0,0,1,71.3,88.8Zm0-29A11.5,11.5,0,1,0,82.8,71.3,11.5,11.5,0,0,0,71.3,59.8Z"></path>\n    </svg>\n    ',this.list=[{value:"1",label:"One Missisipi",description:"with description"},{value:"2",label:"Two mississipi",icon:this.icon},{value:"3",label:"Three mississipi",icon:this.icon,iconPosition:"right"},{value:"4",label:"",icon:this.icon},{value:"5",label:"Five mississipi",disabled:!0},{value:"6",customLabel:"<div class='custom-option w-100'>Six mississipi</div>"}],this.multi=!0,this.disabled=!1,this.error=!1,this.errorMessage="i am an error",document.title="Toggle Selector - SEB Angular Components"}return e.\u0275fac=function(n){return new(n||e)},e.\u0275cmp=s.Hb({type:e,selectors:[["app-toggle-page"]],decls:9,vars:11,consts:[[3,"importString"],["example",""],[3,"multi","list","ngModel","disabled","error","errorMessage","ngModelChange"],["code",""],["controls","",1,"row"],["label","Multi select",1,"w-100",3,"ngModel","ngModelChange"],["label","Error state",1,"w-100",3,"ngModel","ngModelChange"],["label","Disable state",1,"w-100",3,"ngModel","ngModelChange"]],template:function(e,n){1&e&&(s.Tb(0,"app-doc-page",0),s.Rb(1,1),s.Tb(2,"sebng-toggle-selector",2),s.ac("ngModelChange",function(e){return n.model=e}),s.Sb(),s.Qb(),s.Rb(3,3),s.Hc(4),s.Qb(),s.Tb(5,"div",4),s.Tb(6,"sebng-checkbox",5),s.ac("ngModelChange",function(e){return n.multi=e}),s.Sb(),s.Tb(7,"sebng-checkbox",6),s.ac("ngModelChange",function(e){return n.error=e}),s.Sb(),s.Tb(8,"sebng-checkbox",7),s.ac("ngModelChange",function(e){return n.disabled=e}),s.Sb(),s.Sb(),s.Sb()),2&e&&(s.mc("importString",n.importString),s.Ab(2),s.mc("multi",n.multi)("list",n.list)("ngModel",n.model)("disabled",n.disabled)("error",n.error)("errorMessage",n.errorMessage),s.Ab(2),s.Ic(n.code),s.Ab(2),s.mc("ngModel",n.multi),s.Ab(1),s.mc("ngModel",n.error),s.Ab(1),s.mc("ngModel",n.disabled))},directives:[a.a,c.a,i.l,i.n,g.a],styles:[".custom-option {\n                background-color: lightblue;\n                width: 100%;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                align-self: stretch;\n            }"]}),e}()}],d=function(){function e(){}return e.\u0275mod=s.Lb({type:e}),e.\u0275inj=s.Kb({factory:function(n){return new(n||e)},imports:[[r.i.forChild(u)],r.i]}),e}(),h=t("rk0L"),p=function(){function e(){}return e.\u0275mod=s.Lb({type:e}),e.\u0275inj=s.Kb({factory:function(n){return new(n||e)},imports:[[d,l.a,o.c,i.h,h.a]]}),e}()}}]);