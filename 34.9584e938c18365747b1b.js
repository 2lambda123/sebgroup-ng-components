(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{gIh4:function(e,n,t){"use strict";t.r(n),n.default='import { Component, Input, Output, EventEmitter, ViewEncapsulation, forwardRef, Provider } from "@angular/core";\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from "@angular/forms";\n\nconst CUSTOM_TEXTAREA_CONTROL_VALUE_ACCESSOR: Provider = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TextareaComponent),\n    multi: true,\n};\n\n/** Textarea is a component that allows user to add or edit text in multiline */\n@Component({\n    selector: "sebng-textarea",\n    templateUrl: "./textarea.component.html",\n    styleUrls: ["./textarea.component.scss"],\n    encapsulation: ViewEncapsulation.None,\n    providers: [CUSTOM_TEXTAREA_CONTROL_VALUE_ACCESSOR],\n})\nexport class TextareaComponent implements ControlValueAccessor {\n    /** Element class name */\n    @Input() className?: string;\n    /** The visible width of the textarea. It must be a positive integer. */\n    @Input() cols?: number;\n    /** Property sets whether textarea is disabled */\n    @Input() disabled?: boolean;\n    /** Error message related to element */\n    @Input() error?: string;\n    /** Property sets whether textarea is focused */\n    @Input() focus?: boolean;\n    /** Element ID */\n    @Input() id?: string;\n    /** Element label */\n    @Input() label?: string;\n    /** Maximum length of input allowed for the textarea */\n    @Input() max?: number;\n    /** Name of textarea */\n    @Input() name: string;\n    /** Element placeholder */\n    @Input() placeholder?: string;\n    /** Property sets whether textarea is readonly */\n    @Input() readonly?: boolean;\n    /** Property sets whether textarea is resizable */\n    @Input() resizable?: boolean;\n    /** The visible height of the textarea. It must be a positive integer. */\n    @Input() rows?: number;\n\n    /** Callback when textarea is defocused */\n    @Output() onBlur: EventEmitter<FocusEvent> = new EventEmitter<FocusEvent>();\n    /** Callback when value of textarea is changed */\n    @Output() onChange: EventEmitter<string> = new EventEmitter<string>();\n    /** Callback when textarea is focused */\n    @Output() onFocus: EventEmitter<FocusEvent> = new EventEmitter<FocusEvent>();\n    /** Callback when key is pressed */\n    @Output() onKeyDown: EventEmitter<KeyboardEvent> = new EventEmitter<KeyboardEvent>();\n    /** Callback when a key that produces a character value is pressed down */\n    @Output() onKeyPress: EventEmitter<KeyboardEvent> = new EventEmitter<KeyboardEvent>();\n    /** Callback when key is released */\n    @Output() onKeyUp: EventEmitter<KeyboardEvent> = new EventEmitter<KeyboardEvent>();\n\n    private _value: string;\n\n    private onTouchedCallback: () => void;\n    private onChangeCallback: (_: any) => void;\n\n    @Input()\n    get value(): string {\n        return this._value;\n    }\n\n    set value(v: string) {\n        if (v !== this._value) {\n            this._value = v;\n            this.onChangeCallback && this.onChangeCallback(v);\n            this.onChange && this.onChange.emit(v);\n        }\n    }\n\n    // event\n    handleBlur(e: MouseEvent): void {\n        this.onBlur?.emit(e);\n    }\n\n    handleKeyUp(e: KeyboardEvent): void {\n        this.onKeyUp?.emit(e);\n    }\n\n    handleKeyDown(e: KeyboardEvent): void {\n        this.onKeyDown?.emit(e);\n    }\n\n    handleFocus(e: MouseEvent): void {\n        this.onFocus?.emit(e);\n    }\n\n    handleKeyPress(e: KeyboardEvent): void {\n        this.onKeyPress?.emit(e);\n    }\n\n    // accessor props\n    writeValue(val: string): void {\n        this._value = val;\n    }\n\n    registerOnChange(fn: () => void): void {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouchedCallback = fn;\n    }\n}\n'},t45G:function(e,n,t){"use strict";t.r(n),t.d(n,"TextareaPageModule",function(){return h});var r=t("VWPQ"),o=t("SVse"),a=t("rk0L"),i=t("s7LF"),l=t("iInd"),s=t("Ci8B"),u=t("8Y7J"),d=t("17Ss"),p=t("3iBh"),c=t("B3dm"),m=[{path:"",component:function(){function e(e){this.formService=e,this.importString=t("gIh4"),this.snippet="<sebng-textarea></sebng-textarea>",this.value="",document.title="Textarea - SEB Angular Components",this.extendedFormGroup=this.formService.dynamicFormSectionsToFormGroup([{key:"text",items:[{key:"placeholder",label:"Placeholder",controlType:"Text"},{key:"label",label:"Label",controlType:"Text",value:"Element label"}]},{key:"numbers",items:[{key:"cols",label:"Columns",description:"The visible width of the textarea.",controlType:"Number",value:22,min:1,max:80},{key:"rows",label:"Rows",description:"The visible height of the textarea.",controlType:"Number",value:6,min:1,max:20},{key:"max",label:"Max",description:"Maximum length of input allowed for the textarea.",controlType:"Number",value:100,min:1,max:1e3}]},{key:"toggles",items:[{key:"resizable",value:!0,controlType:"Checkbox",description:"Property sets whether textarea is resizable.",label:"Resizable",order:5},{key:"readonly",value:!1,controlType:"Checkbox",description:"Property sets whether textarea is readonly.",label:"Read-only",order:20},{key:"disabled",value:!1,controlType:"Checkbox",description:"Property sets whether textarea is disabled/",label:"Disabled",order:10}]}])}return e.prototype.ngOnInit=function(){},e.\u0275fac=function(n){return new(n||e)(u.Nb(s.a))},e.\u0275cmp=u.Hb({type:e,selectors:[["app-textarea-page"]],features:[u.zb([s.a])],decls:7,vars:14,consts:[[3,"importString","centered"],["example",""],[3,"id","label","placeholder","resizable","disabled","readonly","cols","rows","max","ngModel","ngModelChange"],["controls",""],[3,"extendedFormGroup"],["code",""]],template:function(e,n){1&e&&(u.Tb(0,"app-doc-page",0),u.Rb(1,1),u.Tb(2,"sebng-textarea",2),u.ac("ngModelChange",function(e){return n.value=e}),u.Sb(),u.Qb(),u.Rb(3,3),u.Ob(4,"app-dynamic-form",4),u.Qb(),u.Rb(5,5),u.Hc(6),u.Qb(),u.Sb()),2&e&&(u.mc("importString",n.importString)("centered",!0),u.Ab(2),u.mc("id","textare-example")("label",n.extendedFormGroup.value.text.label)("placeholder",n.extendedFormGroup.value.text.placeholder)("resizable",n.extendedFormGroup.value.toggles.resizable)("disabled",n.extendedFormGroup.value.toggles.disabled)("readonly",n.extendedFormGroup.value.toggles.readonly)("cols",n.extendedFormGroup.value.numbers.cols)("rows",n.extendedFormGroup.value.numbers.rows)("max",n.extendedFormGroup.value.numbers.max)("ngModel",n.value),u.Ab(2),u.mc("extendedFormGroup",n.extendedFormGroup),u.Ab(2),u.Ic(n.snippet))},directives:[d.a,p.a,i.l,i.n,c.a],encapsulation:2}),e}()}],b=function(){function e(){}return e.\u0275mod=u.Lb({type:e}),e.\u0275inj=u.Kb({factory:function(n){return new(n||e)},imports:[[l.i.forChild(m)],l.i]}),e}(),h=function(){function e(){}return e.\u0275mod=u.Lb({type:e}),e.\u0275inj=u.Kb({factory:function(n){return new(n||e)},imports:[[o.c,b,i.h,a.a,r.a]]}),e}()}}]);