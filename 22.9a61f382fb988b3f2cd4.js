(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{"+Gzs":function(n,e,t){"use strict";t.r(e),t.d(e,"CollapsePageModule",function(){return u});var i=t("SVse"),o=t("rk0L"),a=t("zLNk"),s=t("bWRJ"),l=t("s7LF"),r=t("iInd"),p=t("8Y7J"),c=t("17Ss"),g=t("KDdX"),d=t("+qop"),h=[{path:"",component:function(){function n(){this.importString=t("zca1"),this.snippet='<sebng-collapse [toggle]="toggle"></sebng-collapse>',this.toggle=!0,document.title="Collapse - SEB Angular Components"}return n.\u0275fac=function(e){return new(e||n)},n.\u0275cmp=p.Hb({type:n,selectors:[["app-collapse-page"]],decls:9,vars:4,consts:[[1,"align-example-normal",3,"importString"],["example",""],[3,"toggle"],[1,"border","border-danger","p-3"],["controls",""],["label","Collapse toggle",3,"ngModel","ngModelChange"],["code",""]],template:function(n,e){1&n&&(p.Tb(0,"app-doc-page",0),p.Tb(1,"div",1),p.Tb(2,"sebng-collapse",2),p.Tb(3,"p",3),p.Hc(4," Provident consequatur omnis vitae aut saepe. Quis autem aliquam tenetur. Officiis quia est dolorem quaerat sed rerum omnis explicabo nam. Quo praesentium rerum quia beatae aspernatur dolorem laudantium aperiam. Sed libero inventore. Exercitationem et delectus facilis possimus ad autem. "),p.Sb(),p.Sb(),p.Sb(),p.Tb(5,"div",4),p.Tb(6,"sebng-toggle",5),p.ac("ngModelChange",function(n){return e.toggle=n}),p.Sb(),p.Sb(),p.Rb(7,6),p.Hc(8),p.Qb(),p.Sb()),2&n&&(p.mc("importString",e.importString),p.Ab(2),p.mc("toggle",e.toggle),p.Ab(4),p.mc("ngModel",e.toggle),p.Ab(2),p.Ic(e.snippet))},directives:[c.a,g.a,d.a,l.l,l.n],styles:[".doc-page.align-example-normal .playground.card .example {\n                align-items: normal;\n            }"]}),n}()}],m=function(){function n(){}return n.\u0275mod=p.Lb({type:n}),n.\u0275inj=p.Kb({factory:function(e){return new(e||n)},imports:[[r.i.forChild(h)],r.i]}),n}(),u=function(){function n(){}return n.\u0275mod=p.Lb({type:n}),n.\u0275inj=p.Kb({factory:function(e){return new(e||n)},imports:[[i.c,m,l.h,o.a,a.a,s.a]]}),n}()},zca1:function(n,e,t){"use strict";t.r(e),e.default='import { Component, Input, ViewChild, ElementRef, EventEmitter, Output, OnChanges, SimpleChanges } from "@angular/core";\n\n/** A helper component for collapsing any content placed inside of it */\n@Component({\n    selector: "sebng-collapse",\n    template: `\n        <div\n            #collapseRef\n            [ngStyle]="{ display: this.display, height: this.height, opacity: this.opacity }"\n            (transitionend)="afterTransition($event)"\n            [attr.id]="id"\n            [ngClass]="class"\n            class="custom-collapse"\n        >\n            <ng-content></ng-content>\n        </div>\n    `,\n    styles: [\n        `\n            div.custom-collapse {\n                overflow: hidden;\n                transition: height 200ms linear, opacity 200ms linear;\n            }\n        `,\n    ],\n})\nexport class CollapseComponent implements OnChanges {\n    /** Collapse toggle */\n    @Input() toggle?: boolean = true;\n    /** Element class */\n    @Input() class?: string;\n    /** Element id */\n    @Input() id?: string;\n    /** This method will be triggered after the transition has ended */\n    @Output() transitionEnd: EventEmitter<void> = new EventEmitter();\n\n    @ViewChild("collapseRef") collapseRef: ElementRef<HTMLDivElement>;\n\n    display: string = "block";\n    height: string = "auto";\n    opacity: "0" | "1" = "1";\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.toggle) {\n            this.toggle ? this.expand() : this.collapse();\n        }\n    }\n\n    /** Collapse the content */\n    collapse(): void {\n        /** Since height `auto` will not transition, we need to change it to pixels */\n        this.height = this.collapseRef?.nativeElement.scrollHeight + "px" || "0px";\n        /** This async delay is needed for the height change to take effect */\n        setTimeout(() => {\n            this.height = 0 + "px";\n            this.opacity = "0";\n        }, 10);\n    }\n\n    /** Expand the content */\n    expand(): void {\n        /** Cannot transition when display is set to `none`, we need to change it to `block` */\n        this.display = "block";\n        /** This async delay is needed for the height change to take effect */\n        setTimeout(() => {\n            this.height = this.collapseRef?.nativeElement.scrollHeight + "px" || "0px";\n            this.opacity = "1";\n        }, 10);\n    }\n\n    /**\n     * An event handler triggered after collapse/expand transition ends\n     * @param e The transition event\n     */\n    afterTransition(e: TransitionEvent): void {\n        if (e.propertyName === "height") {\n            if (this.toggle) {\n                this.height = "auto";\n            } else {\n                this.display = "none";\n            }\n        }\n        this.transitionEnd.emit();\n    }\n}\n'}}]);