(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{"74wx":function(n,e,t){"use strict";t.r(e),t.d(e,"DatepickerPageModule",function(){return b});var a=t("4rW9"),o=t("SVse"),r=t("rk0L"),i=t("s7LF"),s=t("PGw9"),c=t("iInd"),l=t("8Y7J"),u=t("17Ss"),m=t("8GBF"),d=t("Njz3");function h(n,e){if(1&n){var t=l.Ub();l.Tb(0,"div"),l.Tb(1,"label"),l.Hc(2,"Locale code:"),l.Sb(),l.Tb(3,"p"),l.Tb(4,"small"),l.Hc(5,"Set a locale for the custom picker (defaults to system locale)."),l.Sb(),l.Sb(),l.Tb(6,"input",13),l.ac("ngModelChange",function(n){return l.xc(t),l.ec().localeCode=n}),l.Sb(),l.Sb()}if(2&n){var a=l.ec();l.Ab(6),l.Ec("width",10,"rem"),l.mc("ngModel",a.localeCode)}}var g=[{path:"",component:function(){function n(){this.importString=t("9gJj"),this.snippet='<sebng-datepicker [(ngModel)]="model"></sebng-datepicker>',this.localeCode="en-US",document.title="Datepicker - SEB Angular Components";var n=new Date,e=new Date;e.setMonth(n.getMonth()+1),this.model=n,this.rangeFrom=n,this.rangeTo=e}return n.prototype.ngOnInit=function(){},n.\u0275fac=function(e){return new(e||n)},n.\u0275cmp=l.Hb({type:n,selectors:[["app-datepicker-page"]],decls:25,vars:19,consts:[[3,"importString"],["example","",1,"row"],[1,"col-12"],["className","mb-3",3,"ngModel","monthPicker","forceCustom","localeCode","ngModelChange"],[1,"row"],[1,"col-lg"],[3,"ngModel","localeCode","monthPicker","forceCustom","max","ngModelChange"],[3,"ngModel","localeCode","monthPicker","forceCustom","min","ngModelChange"],["controls","",1,"row"],["label","Month Picker","description","Switch to month picker only",3,"ngModel","ngModelChange"],["label","Custom date picker","description","This picker is the automatic fallback on browsers that don't support html5 datepicker",3,"ngModel","ngModelChange"],[4,"ngIf"],["code",""],["type","text","placeholder","xx-XX",1,"form-control",3,"ngModel","ngModelChange"]],template:function(n,e){1&n&&(l.Tb(0,"app-doc-page",0),l.Tb(1,"div",1),l.Tb(2,"div",2),l.Tb(3,"label"),l.Hc(4,"Normal"),l.Sb(),l.Tb(5,"sebng-datepicker",3),l.ac("ngModelChange",function(n){return e.model=n}),l.Sb(),l.Sb(),l.Ob(6,"hr"),l.Tb(7,"div",2),l.Tb(8,"label"),l.Hc(9,"Range"),l.Sb(),l.Tb(10,"div",4),l.Tb(11,"div",5),l.Tb(12,"small"),l.Hc(13,"From:"),l.Sb(),l.Tb(14,"sebng-datepicker",6),l.ac("ngModelChange",function(n){return e.rangeFrom=n}),l.Sb(),l.Sb(),l.Tb(15,"div",5),l.Tb(16,"small"),l.Hc(17,"To:"),l.Sb(),l.Tb(18,"sebng-datepicker",7),l.ac("ngModelChange",function(n){return e.rangeTo=n}),l.Sb(),l.Sb(),l.Sb(),l.Sb(),l.Sb(),l.Tb(19,"div",8),l.Tb(20,"sebng-checkbox",9),l.ac("ngModelChange",function(n){return e.monthPicker=n}),l.Sb(),l.Tb(21,"sebng-checkbox",10),l.ac("ngModelChange",function(n){return e.forceCustom=n}),l.Sb(),l.Fc(22,h,7,3,"div",11),l.Sb(),l.Rb(23,12),l.Hc(24),l.Qb(),l.Sb()),2&n&&(l.mc("importString",e.importString),l.Ab(5),l.mc("ngModel",e.model)("monthPicker",e.monthPicker)("forceCustom",e.forceCustom)("localeCode",e.localeCode),l.Ab(9),l.mc("ngModel",e.rangeFrom)("localeCode",e.localeCode)("monthPicker",e.monthPicker)("forceCustom",e.forceCustom)("max",e.rangeTo),l.Ab(4),l.mc("ngModel",e.rangeTo)("localeCode",e.localeCode)("monthPicker",e.monthPicker)("forceCustom",e.forceCustom)("min",e.rangeFrom),l.Ab(2),l.mc("ngModel",e.monthPicker),l.Ab(1),l.mc("ngModel",e.forceCustom),l.Ab(1),l.mc("ngIf",e.forceCustom),l.Ab(2),l.Ic(e.snippet))},directives:[u.a,m.a,i.l,i.n,d.a,o.o,i.b],encapsulation:2}),n}()}],p=function(){function n(){}return n.\u0275mod=l.Lb({type:n}),n.\u0275inj=l.Kb({factory:function(e){return new(e||n)},imports:[[c.i.forChild(g)],c.i]}),n}(),b=function(){function n(){}return n.\u0275mod=l.Lb({type:n}),n.\u0275inj=l.Kb({factory:function(e){return new(e||n)},imports:[[o.c,p,i.h,r.a,a.a,s.a]]}),n}()},"9gJj":function(n,e,t){"use strict";t.r(e),e.default='import { Component, Input, forwardRef, ViewEncapsulation } from "@angular/core";\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from "@angular/forms";\nimport { padNumber } from "./formatters";\n\nexport const CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => DatepickerComponent),\n    multi: true,\n};\n\n/** Date pickers simplify the task of selecting a date in a visual representation of a calendar. */\n@Component({\n    selector: "sebng-datepicker",\n    templateUrl: "./datepicker.component.html",\n    styleUrls: ["./datepicker.component.scss"],\n    providers: [CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR],\n    encapsulation: ViewEncapsulation.None,\n})\nexport class DatepickerComponent implements ControlValueAccessor {\n    /** Element placeholder */\n    @Input() placeholder: string = "yyyy-mm-dd";\n    /** Element class name */\n    @Input() className?: string;\n    /** Property sets whether a datepicker is a month picker  */\n    @Input() monthPicker?: boolean = false;\n    /** Property sets whether SEB styled datepicker will be rendered despite the browser used */\n    @Input() forceCustom?: boolean = false;\n    /** Property sets whether datepicker is disabled */\n    @Input() disabled?: boolean = false;\n    /** Minimum range of date that can be selected */\n    @Input() min?: Date;\n    /** Maximum range of date that can be selected */\n    @Input() max?: Date;\n\n    unitNames: { month: string; day: string; year: string } = {\n        month: "Month",\n        day: "Day",\n        year: "Year",\n    };\n\n    private _localeCode: string;\n\n    // Placeholders for the callbacks which are later provided\n    // by the Control Value Accessor\n    private onTouchedCallback: () => void;\n    private onChangeCallback: (_: any) => void;\n    private _customDay: number;\n    private _customMonth: number;\n    private _customYear: number;\n    private _value: Date = null;\n\n    /** Locale of datepicker */\n    @Input("localeCode")\n    set localeCode(v: string) {\n        this._localeCode = v;\n        const date: Date = new Date(2012, 0, 5);\n        const locale = new Intl.DateTimeFormat(this.localeCode, { month: "long" });\n        const rtf: any = this.getRelativeTimeFormat(this.localeCode);\n        const localeDateString: string = new Intl.DateTimeFormat(this.localeCode)?.format(date);\n        const customPickerOrder: string[] = ["day", "month", "year"].sort((a, b) => {\n            const positions: { day: number; month: number; year: number } = {\n                day: localeDateString.search(/5/g) || 0,\n                month: localeDateString.search(/1/g) || 1,\n                year: localeDateString.search(/2012/g) || 2,\n            };\n            return positions[a] - positions[b];\n        });\n\n        customPickerOrder?.map(unit => {\n            this.unitNames[unit] =\n                rtf\n                    ?.formatToParts(1, unit)\n                    ?.filter(x => x.type === "literal")[1]\n                    ?.value?.trim() || unit;\n        });\n\n        this._customPickerOrder = customPickerOrder;\n        const monthNames: string[] = [this.unitNames.month];\n        [...Array(12)].map((_, i) => {\n            date.setMonth(i);\n            monthNames.push(locale.format(date));\n        });\n        this._monthNames = monthNames;\n    }\n    get localeCode(): string {\n        return this._localeCode;\n    }\n\n    private _monthNames: string[];\n    /** \x3c!-- skip --\x3e */\n    get monthNames(): string[] {\n        return this._monthNames;\n    }\n\n    private _customPickerOrder: string[];\n    /** \x3c!-- skip --\x3e */\n    get customPickerOrder(): string[] {\n        return this._customPickerOrder;\n    }\n\n    constructor() {\n        const myLocale = this.getLocale();\n        this.localeCode = myLocale;\n    }\n\n    getLocale(): string {\n        return navigator.languages && navigator.languages.length ? navigator.languages[0] : navigator.language;\n    }\n\n    getRelativeTimeFormat(code: string): any {\n        if ((Intl as any)["RelativeTimeFormat"]) {\n            return new (Intl as any).RelativeTimeFormat(code);\n        }\n        return null;\n    }\n\n    get inputRawValue(): string {\n        return this.getStringFromDate(this.value);\n    }\n    set inputRawValue(v: string) {\n        this.value = new Date(v);\n    }\n\n    getStringFromDate(d: Date): string {\n        if (this.isValidDate(d)) {\n            return d?.toISOString()?.substr(0, this.monthPicker ? 7 : 10) || "";\n        } else {\n            return "";\n        }\n    }\n\n    trySaveDate(): void {\n        const day: number = this.monthPicker ? 1 : this.customDay;\n        const month: number = this.customMonth;\n        const year: number = this.customYear;\n        const dateString: string = `${padNumber(year, true)}-${padNumber(month)}-${padNumber(day)}`;\n        const date: Date = new Date(dateString);\n        const m: number = date.getMonth() + 1;\n        if (date.getFullYear() === year && m === month && date.getDate() === day) {\n            this.value = date;\n        } else {\n            this.value = new Date("");\n        }\n    }\n    /** \x3c!-- skip --\x3e */\n    get customDay(): number {\n        if (this._customDay === undefined && !!this.inputRawValue) {\n            const value: number = this.monthPicker ? 1 : Number(this.inputRawValue.substr(8, 2));\n            this._customDay = value;\n            return this._customDay;\n        }\n        return this._customDay;\n    }\n    /** \x3c!-- skip --\x3e */\n    set customDay(v: number) {\n        if (!this.monthPicker) {\n            this._customDay = v ? Number(v) : null;\n            this.trySaveDate();\n        }\n    }\n\n    get customMonth(): number {\n        if (this._customMonth === undefined && !!this.inputRawValue) {\n            const value: number = Number(this.inputRawValue.substr(5, 2));\n            this._customMonth = value;\n            return this._customMonth;\n        }\n        return this._customMonth;\n    }\n    /** \x3c!-- skip --\x3e */\n    set customMonth(v: number) {\n        this._customMonth = v ? Number(v) : null;\n        this.trySaveDate();\n    }\n\n    get customYear(): number {\n        if (this._customYear === undefined && !!this.inputRawValue) {\n            const value: number = Number(this.inputRawValue.substr(0, 4));\n            this._customYear = value;\n            return this._customYear;\n        }\n        return this._customYear;\n    }\n    /** \x3c!-- skip --\x3e */\n    set customYear(v: number) {\n        this._customYear = v ? Number(v) : null;\n        this.trySaveDate();\n    }\n\n    // get and set accessor----------------------\n    @Input()\n    get value(): Date | null {\n        return this._value;\n    }\n    /** \x3c!-- skip --\x3e */\n    set value(v: Date | null) {\n        this.isDateInRange(\n            v,\n            () => {\n                this._value = v;\n            },\n            () => {\n                this._value = new Date("");\n            }\n        );\n        this.onTouchedCallback && this.onTouchedCallback();\n        this.onChangeCallback && this.onChangeCallback(this._value);\n    }\n\n    isDateInRange(d: Date, success?: () => void, fail?: () => void): void {\n        if (!this.min && !this.max) {\n            success && success();\n        } else if (this.min && d >= this.min) {\n            if (!this.max || (this.max && d <= this.max)) {\n                success && success();\n            } else {\n                fail && fail();\n            }\n        } else if (this.max && d <= this.max) {\n            if (!this.min || (this.min && d >= this.min)) {\n                success && success();\n            } else {\n                fail && fail();\n            }\n        } else {\n            fail && fail();\n        }\n    }\n\n    // From ControlValueAccessor interfaces--------------\n    writeValue(value: any): void {\n        this.value = value;\n    }\n    registerOnChange(fn: any): void {\n        this.onChangeCallback = fn;\n    }\n    registerOnTouched(fn: any): void {\n        this.onTouchedCallback = fn;\n    }\n\n    supportsInputOfType(type: "date" | "month"): boolean {\n        const input: HTMLInputElement = document.createElement("input");\n        input.setAttribute("type", type);\n\n        const notADateValue: string = "not-a-date";\n        input.setAttribute("value", notADateValue);\n\n        return input.value !== notADateValue;\n    }\n\n    isValidDate(d: Date): boolean {\n        return !!(d && d instanceof Date && !isNaN(d.getTime()));\n    }\n}\n'}}]);