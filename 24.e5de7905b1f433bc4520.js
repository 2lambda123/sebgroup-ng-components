(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{"1uw2":function(e,n,t){"use strict";t.r(n),t.d(n,"DropdownPageModule",function(){return T});var s=t("DJJd"),l=t("SVse"),i=t("rk0L"),o=t("s7LF"),a=t("PGw9"),r=t("iInd"),d=t("mrSG"),c=t("8Y7J"),h=t("17Ss"),u=t("A1V2"),p=t("Njz3");function b(e,n){if(1&e){var t=c.Ub();c.Tb(0,"sebng-checkbox",15),c.ac("ngModelChange",function(e){return c.xc(t),c.ec(2).clearable=e}),c.Sb()}if(2&e){var s=c.ec(2);c.mc("ngModel",s.clearable)}}function m(e,n){if(1&e){var t=c.Ub();c.Rb(0),c.Tb(1,"div",16),c.Tb(2,"label"),c.Hc(3,"Mian placeholder text:"),c.Sb(),c.Tb(4,"p"),c.Tb(5,"small"),c.Hc(6,"Set a placeholder for when no item is selected (defaults to 'Select ...')."),c.Sb(),c.Sb(),c.Tb(7,"input",17),c.ac("ngModelChange",function(e){return c.xc(t),c.ec(2).placeholder=e}),c.Sb(),c.Sb(),c.Tb(8,"div",16),c.Tb(9,"label"),c.Hc(10,"Search text placeholder:"),c.Sb(),c.Tb(11,"p"),c.Tb(12,"small"),c.Hc(13,"Set custom placeholder for search input"),c.Sb(),c.Sb(),c.Tb(14,"input",17),c.ac("ngModelChange",function(e){return c.xc(t),c.ec(2).searchText=e}),c.Sb(),c.Sb(),c.Tb(15,"div",16),c.Tb(16,"label"),c.Hc(17,'"Select All" text:'),c.Sb(),c.Tb(18,"input",17),c.ac("ngModelChange",function(e){return c.xc(t),c.ec(2).selectAllOptionText=e}),c.Sb(),c.Sb(),c.Tb(19,"div",16),c.Tb(20,"label"),c.Hc(21,'"All Selected" text:'),c.Sb(),c.Tb(22,"input",17),c.ac("ngModelChange",function(e){return c.xc(t),c.ec(2).selectAllText=e}),c.Sb(),c.Sb(),c.Tb(23,"div",16),c.Tb(24,"label"),c.Hc(25,'"Empty" text:'),c.Sb(),c.Tb(26,"input",17),c.ac("ngModelChange",function(e){return c.xc(t),c.ec(2).emptyText=e}),c.Sb(),c.Sb(),c.Tb(27,"div",16),c.Tb(28,"label"),c.Hc(29,'"No Results" text:'),c.Sb(),c.Tb(30,"input",17),c.ac("ngModelChange",function(e){return c.xc(t),c.ec(2).noResultText=e}),c.Sb(),c.Sb(),c.Qb()}if(2&e){var s=c.ec(2);c.Ab(7),c.mc("ngModel",s.placeholder),c.Ab(7),c.mc("ngModel",s.searchText),c.Ab(4),c.mc("ngModel",s.selectAllOptionText),c.Ab(4),c.mc("ngModel",s.selectAllText),c.Ab(4),c.mc("ngModel",s.emptyText),c.Ab(4),c.mc("ngModel",s.noResultText)}}function g(e,n){if(1&e){var t=c.Ub();c.Rb(0),c.Tb(1,"sebng-checkbox",10),c.ac("ngModelChange",function(e){return c.xc(t),c.ec().isEllipsisMode=e}),c.Sb(),c.Tb(2,"sebng-checkbox",11),c.ac("ngModelChange",function(e){return c.xc(t),c.ec().searchable=e}),c.Sb(),c.Fc(3,b,1,1,"sebng-checkbox",12),c.Tb(4,"sebng-checkbox",13),c.ac("ngModelChange",function(e){return c.xc(t),c.ec().useShorthand=e})("ngModelChange",function(){return c.xc(t),c.ec().onShorthandChange()}),c.Sb(),c.Tb(5,"sebng-checkbox",14),c.ac("ngModelChange",function(){c.xc(t);var e=c.ec();return e.showPlaceholders=!e.showPlaceholders}),c.Sb(),c.Fc(6,m,31,6,"ng-container",8),c.Qb()}if(2&e){var s=c.ec();c.Ab(1),c.mc("ngModel",s.isEllipsisMode),c.Ab(1),c.mc("ngModel",s.searchable),c.Ab(1),c.mc("ngIf",!s.isEllipsisMode),c.Ab(1),c.mc("ngModel",s.useShorthand),c.Ab(1),c.mc("ngModel",s.showPlaceholders),c.Ab(1),c.mc("ngIf",s.showPlaceholders)}}var f=function(e,n,t,s,l){return{searchText:e,selectAllOptionText:n,selectAllText:t,emptyText:s,noResultText:l}},v=function(){return[]},w=[{path:"",component:function(){function e(){this.importString=t("XvsQ"),this.snippet='<sebng-dropdown [list]="list"></sebng-dropdown>',this.list=Object(d.e)(Array(10)).map(function(e,n){return{label:"Item "+(n+1),value:"value-"+(n+1),disabled:4===n}}),this.selectedValue=Object(d.a)({},this.list[2]),this.selectedValues=[Object(d.a)({},this.list[0]),Object(d.a)({},this.list[3]),Object(d.a)({},this.list[4])],this.showPlaceholders=!1,this.isNative=!1,this.isEllipsisMode=!1,this.disabled=!1,this.searchable=!1,this.clearable=!1,this.useShorthand=!1,document.title="Dropdown - SEB Angular Components"}return e.prototype.onShorthandChange=function(){var e=this;this.list=this.list.map(this.useShorthand?function(e,n){return Object(d.a)(Object(d.a)({},e),{shorthand:n.toString()})}:function(e,n){return Object(d.a)(Object(d.a)({},e),{shorthand:null})}),this.selectedValue=this.list.filter(function(n){return n.value===e.selectedValue.value})[0]},e.\u0275fac=function(n){return new(n||e)},e.\u0275cmp=c.Hb({type:e,selectors:[["app-dropdown-page"]],decls:11,vars:53,consts:[[3,"importString"],["example","",1,"row","w-100"],["label","Single select",1,"col-12","mb-2",3,"list","multi","native","placeholder","placeholders","ellipsisMode","disabled","searchable","clearable","ngModel","ngModelChange"],["label","Multi select",1,"col-12","mb-2",3,"list","multi","native","placeholder","placeholders","ellipsisMode","disabled","searchable","clearable","ngModel","ngModelChange"],["label","Empty dropdown",1,"col-12","mb-2",3,"list","multi","native","placeholder","placeholders","ellipsisMode","disabled","searchable","clearable"],["controls",""],["label","Native select","description","Switch to the native html select element",3,"ngModel","ngModelChange"],["label","Disabled",3,"ngModel","ngModelChange"],[4,"ngIf"],["code",""],["label","Ellipsis mode","description","Switch to ellipsis mode to use the dropdown as a menu item which indicates more actions.",3,"ngModel","ngModelChange"],["label","Searchable","description","Add a search bar to the dropdown menu.",3,"ngModel","ngModelChange"],["label","Clearable","description","Add the option to clear the dropdown of any selection (only single select).",3,"ngModel","ngModelChange",4,"ngIf"],["label","Use shorthand","description","You can render a shorthand of the label when it is selected when you pass it to the dropdown item",3,"ngModel","ngModelChange"],["label","Use custom placeholders","description","Show options for all custom text and placeholders.",3,"ngModel","ngModelChange"],["label","Clearable","description","Add the option to clear the dropdown of any selection (only single select).",3,"ngModel","ngModelChange"],[1,"mb-2"],["type","text",1,"form-control",3,"ngModel","ngModelChange"]],template:function(e,n){1&e&&(c.Tb(0,"app-doc-page",0),c.Tb(1,"div",1),c.Tb(2,"sebng-dropdown",2),c.ac("ngModelChange",function(e){return n.selectedValue=e}),c.Sb(),c.Tb(3,"sebng-dropdown",3),c.ac("ngModelChange",function(e){return n.selectedValues=e}),c.Sb(),c.Ob(4,"sebng-dropdown",4),c.Sb(),c.Tb(5,"div",5),c.Tb(6,"sebng-checkbox",6),c.ac("ngModelChange",function(e){return n.isNative=e}),c.Sb(),c.Tb(7,"sebng-checkbox",7),c.ac("ngModelChange",function(e){return n.disabled=e}),c.Sb(),c.Fc(8,g,7,6,"ng-container",8),c.Sb(),c.Rb(9,9),c.Hc(10),c.Qb(),c.Sb()),2&e&&(c.mc("importString",n.importString),c.Ab(2),c.mc("list",n.list)("multi",!1)("native",n.isNative)("placeholder",n.placeholder)("placeholders",c.tc(34,f,n.searchText,n.selectAllOptionText,n.selectAllText,n.emptyText,n.noResultText))("ellipsisMode",n.isEllipsisMode)("disabled",n.disabled)("searchable",n.searchable)("clearable",n.clearable)("ngModel",n.selectedValue),c.Ab(1),c.mc("list",n.list)("multi",!0)("native",n.isNative)("placeholder",n.placeholder)("placeholders",c.tc(40,f,n.searchText,n.selectAllOptionText,n.selectAllText,n.emptyText,n.noResultText))("ellipsisMode",n.isEllipsisMode)("disabled",n.disabled)("searchable",n.searchable)("clearable",n.clearable)("ngModel",n.selectedValues),c.Ab(1),c.mc("list",c.pc(46,v))("multi",!1)("native",n.isNative)("placeholder",n.placeholder)("placeholders",c.tc(47,f,n.searchText,n.selectAllOptionText,n.selectAllText,n.emptyText,n.noResultText))("ellipsisMode",n.isEllipsisMode)("disabled",n.disabled)("searchable",n.searchable)("clearable",n.clearable),c.Ab(2),c.mc("ngModel",n.isNative),c.Ab(1),c.mc("ngModel",n.disabled),c.Ab(1),c.mc("ngIf",!n.isNative),c.Ab(2),c.Ic(n.snippet))},directives:[h.a,u.a,o.l,o.n,p.a,l.o,o.b],encapsulation:2}),e}()}],y=function(){function e(){}return e.\u0275mod=c.Lb({type:e}),e.\u0275inj=c.Kb({factory:function(n){return new(n||e)},imports:[[r.i.forChild(w)],r.i]}),e}(),T=function(){function e(){}return e.\u0275mod=c.Lb({type:e}),e.\u0275inj=c.Kb({factory:function(n){return new(n||e)},imports:[[l.c,y,o.h,i.a,s.a,a.a]]}),e}()},XvsQ:function(e,n,t){"use strict";t.r(n),n.default='import {\n    Component,\n    Input,\n    forwardRef,\n    OnChanges,\n    ViewChild,\n    ElementRef,\n    ViewChildren,\n    QueryList,\n    OnDestroy,\n    NgZone,\n    Provider,\n    HostBinding,\n} from "@angular/core";\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from "@angular/forms";\nimport { fromEvent, Subscription } from "rxjs";\n\nconst CUSTOM_DROPDOWN_CONTROL_VALUE_ACCESSOR: Provider = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => DropdownComponent),\n    multi: true,\n};\n\nexport interface DropdownPlaceholders {\n    searchText?: string;\n    selectAllOptionText?: string;\n    selectAllText?: string;\n    emptyText?: string;\n    noResultText?: string;\n}\n\n/**\n * A dropdown allows the user to select an option from a list.\n * Dropdowns enables users to make a quick selection of the available options for a specific entry.\n */\n@Component({\n    selector: "sebng-dropdown",\n    templateUrl: "./dropdown.component.html",\n    styleUrls: ["./dropdown.component.scss"],\n    providers: [CUSTOM_DROPDOWN_CONTROL_VALUE_ACCESSOR],\n})\nexport class DropdownComponent implements ControlValueAccessor, OnChanges, OnDestroy {\n    static selectedDisplayLength: number = 2;\n    /** Element name */\n    @Input() name: string;\n    /** List of dropdown items */\n    @Input() list: Array<DropdownItem>;\n    /** Element ID */\n    @Input() id?: string;\n    /** Element label */\n    @Input() label?: string;\n    /** Error message of element */\n    @Input() error?: string;\n    /** Element placeholder */\n    @Input() placeholder?: string;\n    /** Element class */\n    @Input() className?: string;\n    /** Property sets whether dropdown is disabled */\n    @Input() disabled?: boolean = false;\n    /** Property sets whether native dropdown is rendered */\n    @Input() native?: boolean = false;\n    /** Property sets whether user can select multiple items in the dropdown */\n    @Input() multi?: boolean;\n    /** Property sets whether dropdown is clearable */\n    @Input() clearable?: boolean = false;\n    /** Property sets whether dropdown is searchable */\n    @Input() searchable?: boolean = false;\n    /** Set custom placeholders for dropdown field */\n    @Input() placeholders?: DropdownPlaceholders;\n    /** On native change callback */\n    @Input() nativeOnChange?: (event: DropdownItem | Array<DropdownItem> | UIEvent) => void;\n    /** Property sets whether dropdown is in ellipsis mode */\n    @Input() ellipsisMode: boolean;\n    @Input() block?: boolean;\n\n    @HostBinding("style") get styles(): string {\n        return this.block ? "width: 100%;" : null;\n    }\n\n    // Placeholders for the callbacks which are later provided\n    // by the Control Value Accessor\n    private onTouchedCallback: () => void;\n    private onChangeCallback: (_: any) => void;\n\n    private _subscriber: Subscription = null;\n    private _open: boolean = false;\n    private _searchText: string = "";\n    private _shouldFocus: boolean = true;\n    private _currentFocused: number = -1;\n\n    private _selectedValue: DropdownItem | Array<DropdownItem> = null;\n    public allSelected: boolean = null;\n\n    set searchText(state: string) {\n        if (this._searchText !== state) {\n            this._searchText = state;\n\n            this._generateHelperArrays();\n        }\n    }\n\n    get searchText(): string {\n        return this._searchText || "";\n    }\n\n    set open(state: boolean) {\n        if (this._open !== state) {\n            this._open = state;\n        }\n\n        if (state) {\n            this.handleFocus();\n        } else {\n            this.searchText = "";\n            if (this.currentFocused > -1) {\n                this.currentFocused = -1;\n            }\n        }\n    }\n\n    get open(): boolean {\n        return this._open;\n    }\n\n    set shouldFocus(state: boolean) {\n        if (this._shouldFocus !== state) {\n            this._shouldFocus = state;\n        }\n    }\n\n    get shouldFocus(): boolean {\n        return this._shouldFocus || false;\n    }\n\n    set currentFocused(state: number) {\n        if (this._currentFocused !== state) {\n            this._currentFocused = state;\n        }\n\n        if (this.open) {\n            this.handleFocus();\n        }\n    }\n\n    get currentFocused(): number {\n        return this._currentFocused;\n    }\n\n    set selectedValue(state: DropdownItem | Array<DropdownItem>) {\n        if (state !== this._selectedValue) {\n            this._selectedValue = state;\n            this._generateHelperArrays();\n        }\n    }\n\n    get selectedValue(): DropdownItem | Array<DropdownItem> {\n        return this._selectedValue;\n    }\n\n    // HELPER ARRAYS\n    /** array of dropdown item elements with a unique id, the original optionItem and calculated selected property */\n    public uniqueList: Array<UniqueItem> = [];\n    /** Array of dropdown item elements which should be displayed in the current render cycle */\n    public displayList: Array<DisplayItem> = [];\n    /** Array of all dropdown item which are currently selected */\n    public selectedList: Array<DropdownItem> = [];\n\n    public toggleButtonId: string = this.getRandomId();\n\n    @ViewChild("dropdownToggleRef", { read: ElementRef }) dropdownToggleRef: ElementRef;\n    @ViewChild("dropdownMenuRef", { read: ElementRef }) dropdownMenuRef: ElementRef;\n    @ViewChild("searchRef", { read: ElementRef }) searchRef: ElementRef;\n\n    @ViewChildren("listRefs") listRefs: QueryList<ElementRef>;\n\n    getRandomId(): string {\n        return (Math.floor(Math.random() * 100) + new Date().getTime()).toString();\n    }\n\n    handleFocus(): void {\n        this._ngZone.runOutsideAngular(() => {\n            setTimeout(() => {\n                if (!this.focusCurrentItem()) {\n                    this.setInitialFocus();\n                }\n            }, 0);\n        });\n    }\n\n    focusCurrentItem(): boolean {\n        if (\n            this.shouldFocus &&\n            this.listRefs.toArray()[this.currentFocused] &&\n            this.listRefs.toArray()[this.currentFocused].nativeElement\n        ) {\n            this.listRefs.toArray()[this.currentFocused].nativeElement.focus();\n            return true;\n        }\n        return null;\n    }\n\n    setInitialFocus(): void {\n        if (this.searchRef && this.searchRef.nativeElement) {\n            this.searchRef.nativeElement.focus();\n        } else if (this.dropdownMenuRef && this.dropdownMenuRef.nativeElement) {\n            this.dropdownMenuRef.nativeElement.focus();\n        }\n    }\n\n    constructor(private _ngZone: NgZone) {\n        this._subscriber = fromEvent(document, "mousedown").subscribe(event => {\n            if (\n                this.dropdownToggleRef &&\n                this.dropdownToggleRef.nativeElement &&\n                !this.dropdownToggleRef.nativeElement.contains(event.target) &&\n                this.dropdownMenuRef &&\n                this.dropdownMenuRef.nativeElement &&\n                !this.dropdownMenuRef.nativeElement.contains(event.target) &&\n                this.open\n            ) {\n                this.open = false;\n            }\n        });\n    }\n\n    ngOnChanges(): void {\n        this._generateHelperArrays();\n    }\n\n    ngOnDestroy(): void {\n        this._subscriber.unsubscribe();\n    }\n\n    /** internal generate helper array function. Should be run on every change where the helper arrays need to be regenerated */\n    private _generateHelperArrays(): void {\n        this.uniqueList =\n            this.list &&\n            this.list\n                .filter((e: DropdownItem) => e && e.hasOwnProperty("value") && e.hasOwnProperty("label"))\n                .map((e: DropdownItem, i: number) => {\n                    const id: string = `${e.value}-${i}`;\n                    let selected: boolean = false;\n\n                    if (!this.multi) {\n                        if ((this.selectedValue as DropdownItem) && e.value === (this.selectedValue as DropdownItem).value) {\n                            selected = true;\n                        }\n                    } else {\n                        if (\n                            (this.selectedValue as Array<DropdownItem>) &&\n                            (this.selectedValue as Array<DropdownItem>).find((el: DropdownItem) => el.value === e.value)\n                        ) {\n                            selected = true;\n                        }\n                    }\n                    return { optionItem: e, id, selected };\n                });\n\n        this.displayList =\n            this.uniqueList &&\n            this.uniqueList\n                .map((e: UniqueItem) => {\n                    return {\n                        ...e,\n                        className: `dropdown-item custom-dropdown-item${this.multi ? " multi" : ""}${e.selected ? " selected" : ""}`,\n                    };\n                })\n                .filter(\n                    (e: UniqueItem) =>\n                        e &&\n                        e.optionItem &&\n                        e.optionItem?.label &&\n                        e.optionItem?.label?.length &&\n                        e.optionItem.label.toString().toLowerCase().indexOf(this.searchText.toLowerCase()) !== -1\n                );\n\n        this.selectedList = this.uniqueList && this.uniqueList.filter((e: UniqueItem) => e.selected).map((e: UniqueItem) => e.optionItem);\n        this.allSelected =\n            this.selectedList &&\n            this.list &&\n            this.selectedList.filter(e => !e.disabled).length === this.list.filter(e => !e.disabled).length;\n\n        if (this.multi && this.searchText.length === 0) {\n            this.displayList = [\n                {\n                    id: "select-all",\n                    optionItem: {\n                        value: "Select All",\n                        label: this.placeholders?.selectAllOptionText || "Select All",\n                    },\n                    selected: this.allSelected,\n                    className: `dropdown-item select-all custom-dropdown-item multi${this.allSelected ? " selected" : ""}`,\n                },\n                ...this.displayList,\n            ];\n        }\n    }\n\n    /** The native event function that runs when a keyboard button is pressed on dropdown toggle */\n    handleKeyDownToggle(event: KeyboardEvent): void {\n        if (this.disabled) {\n            return;\n        }\n\n        const key: string = event.key.toLowerCase();\n\n        switch (key) {\n            case "tab":\n                this.open = false;\n                break;\n            case " ":\n            case "enter":\n                event.preventDefault();\n                this.open = true;\n                break;\n            default:\n                break;\n        }\n    }\n\n    /** The native event function that runs when a keyboard button is pressed on dropdown menu */\n    handleKeyDownMenu(event: KeyboardEvent): void {\n        const key: string = event.key.toLowerCase();\n\n        if (this.open) {\n            switch (key) {\n                case " ":\n                    event.preventDefault();\n                    break;\n                case "tab":\n                case "escape":\n                    this.open = false;\n                    break;\n                case "enter":\n                    event.preventDefault();\n                    if (this.multi && this.searchText.length === 0 && this.currentFocused === 0) {\n                        this.handleSelectAll();\n                    } else if ((this.searchText.length === 0 && this.currentFocused > 0) || this.searchText.length > 0) {\n                        this.optionItemSelected(this.displayList[this.currentFocused].optionItem);\n                    }\n                    break;\n                case "arrowdown":\n                case "down":\n                    event.preventDefault();\n                    if (this.currentFocused < this.displayList.length - 1) {\n                        this.currentFocused = this.currentFocused + 1;\n                    } else if (this.currentFocused === this.displayList.length - 1) {\n                        this.currentFocused = -1;\n                    }\n                    if (this.displayList[this.currentFocused] && this.displayList[this.currentFocused].optionItem.disabled) {\n                        this.handleKeyDownMenu(event);\n                    }\n                    break;\n                case "arrowup":\n                case "up":\n                    event.preventDefault();\n                    if (this.currentFocused === -1) {\n                        this.currentFocused = this.displayList.length - 1;\n                    } else if (this.currentFocused > 0) {\n                        this.currentFocused = this.currentFocused - 1;\n                    } else if (this.currentFocused === 0) {\n                        this.currentFocused = -1;\n                    }\n                    if (this.displayList[this.currentFocused] && this.displayList[this.currentFocused].optionItem.disabled) {\n                        this.handleKeyDownMenu(event);\n                    }\n                    break;\n\n                default:\n                    break;\n            }\n        }\n    }\n\n    /** The native event function that runs when the clean icon is clicked */\n    handleClickClear(event: MouseEvent): void {\n        if (this.disabled) {\n            return;\n        }\n\n        event.stopPropagation();\n        event.preventDefault();\n\n        this.handleClear();\n    }\n\n    /** Function which handles the logic of setting the native onChange prop (and sets the internal selected value as well) */\n    handleNativeOnChange(event: UIEvent): void {\n        if (!this.multi) {\n            const item: DropdownItem = this.list.filter((e: DropdownItem) => e.value === (event.target as HTMLSelectElement).value)[0];\n            this.nativeOnChange && this.nativeOnChange(event);\n            this.selectedValue = item;\n        } else {\n            const items: Array<DropdownItem> = Array.from((event.target as HTMLSelectElement).options as HTMLOptionsCollection)\n                .filter(e => e.selected)\n                .map(e => {\n                    const item: DropdownItem = this.list.filter((el: DropdownItem) => el.value === e.value)[0];\n                    return item;\n                });\n            this.nativeOnChange && this.nativeOnChange(event);\n            this.selectedValue = items;\n        }\n    }\n\n    /** Function which handles the logic of setting the non-native onChange prop (and sets the internal selected value as well) */\n    handleOnChange(value: DropdownItem | Array<DropdownItem>): void {\n        this.nativeOnChange && this.nativeOnChange(value);\n        this.selectedValue = value;\n        this.onChangeCallback && this.onChangeCallback(this.selectedValue);\n        this.onTouchedCallback && this.onTouchedCallback();\n    }\n\n    /** Function containing the clear button logic */\n    handleClear(): void {\n        this.handleOnChange(null);\n        this.open = false;\n    }\n\n    /** The native onchange event function that runs when the search input value changes */\n    handleOnChangeSearch(event: KeyboardEvent): void {\n        if (this.currentFocused !== -1) {\n            this.currentFocused = -1;\n        }\n        this.searchText = (event.target as HTMLInputElement).value;\n    }\n\n    /** Function containing the select dropdown item logic */\n    optionItemSelected(item: DropdownItem): void {\n        if (item.disabled) {\n            return;\n        }\n        if (!this.multi) {\n            const newItem: DropdownItem = { ...item };\n            this.handleOnChange(newItem);\n            this.open = false;\n        } else {\n            const currentList: Array<DropdownItem> = (this.selectedValue as Array<DropdownItem>)\n                ? (this.selectedValue as Array<DropdownItem>)\n                : [];\n            const index: number = currentList.findIndex((e: DropdownItem) => e.value === item.value);\n            if (index === -1) {\n                const newItem: DropdownItem = { ...item };\n                const newList: Array<DropdownItem> = [...currentList, newItem];\n                this.handleOnChange(newList);\n            } else {\n                const newList: Array<DropdownItem> = currentList.filter((e: DropdownItem) => e.value !== item.value);\n                this.handleOnChange(newList);\n            }\n        }\n        this.handleFocus();\n    }\n\n    /** The native event function that runs when the dropdown button is clicked */\n    handleClickToggle(): void {\n        if (!this.disabled) {\n            this.open = !this.open;\n        }\n    }\n\n    /** Function containing the select all button logic */\n    handleSelectAll(): void {\n        if (this.allSelected) {\n            this.handleOnChange([...this.selectedList.filter(e => e.disabled)]);\n        } else {\n            this.handleOnChange([...this.selectedList.filter(e => e.disabled), ...this.list.filter(e => !e.disabled)]);\n        }\n        this.handleFocus();\n    }\n\n    // HELPERS ================================\n    /** Returns the appropriate title for different situations and component types */\n    getTitleLabel(): string {\n        if (this.uniqueList && this.uniqueList.length === 0) {\n            return this.placeholders?.emptyText || "Empty";\n        } else if (this.selectedList && this.selectedList.length > 0) {\n            if (this.multi) {\n                if (this.selectedList.length === 1) {\n                    return this.selectedList[0].label;\n                }\n                if (this.allSelected) {\n                    return this.placeholders?.selectAllText || `All selected (${this.selectedList.length})`;\n                }\n                const displayText: string = this.selectedList\n                    .slice(0, DropdownComponent.selectedDisplayLength)\n                    .map((item: DropdownItem) => item.shorthand || item.label)\n                    .join(", ");\n                return `${displayText}${\n                    this.selectedList.length > DropdownComponent.selectedDisplayLength\n                        ? `... (+${this.selectedList.slice(DropdownComponent.selectedDisplayLength).length})`\n                        : ""\n                }`;\n            }\n            return (this.selectedValue as DropdownItem).shorthand || (this.selectedValue as DropdownItem).label;\n        }\n\n        return this.placeholder && this.placeholder.length ? this.placeholder : "Select ...";\n    }\n\n    handleItemOnMouseMove(index: number): void {\n        this.currentFocused = index;\n        // this.shouldFocus = false;\n    }\n\n    handleItemOnClick(event: MouseEvent, index: number, item: DisplayItem): void {\n        event.preventDefault();\n        this.shouldFocus = true;\n\n        if (this.multi && this.searchText.length === 0 && index === 0) {\n            this.handleSelectAll();\n        } else {\n            this.optionItemSelected(item.optionItem);\n        }\n    }\n\n    writeValue(value: any): void {\n        this.selectedValue = value;\n    }\n    registerOnChange(fn: any): void {\n        this.onChangeCallback = fn;\n    }\n    registerOnTouched(fn: any): void {\n        this.onTouchedCallback = fn;\n    }\n}\n\nexport interface DropdownItem<T = any> {\n    /** The label or text to be displayed in the list */\n    label: string;\n    /** A text to be displayed when the item is selected, ideally, a shorthand of the label */\n    shorthand?: string;\n    /** Any value which should be tied to the item */\n    value: T;\n    /** Sets this items as view only or disabled */\n    disabled?: boolean;\n}\n\ninterface UniqueItem {\n    id: string;\n    optionItem: DropdownItem;\n    selected: boolean;\n}\n\ninterface DisplayItem extends UniqueItem {\n    className: string;\n}\n'}}]);